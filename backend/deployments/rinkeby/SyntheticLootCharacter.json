{
  "address": "0xF5aEdB99d72d84a70BE7a875Ad8232406FDBB91D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_syntheticLootAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_syntheticLootCharacterAssetsAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimOther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "renderOrder",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x16ba146983945bb2cb5e01b3ae96d4ed78999f3091e00e8eacc2eab7815be77c",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0xF5aEdB99d72d84a70BE7a875Ad8232406FDBB91D",
    "transactionIndex": 23,
    "gasUsed": "4832151",
    "logsBloom": "0x
    "blockHash": "0x8c95ea4920c69c5da6ee9f319f0c3dc3646bd7da82d3f4cf71bab01687ab5d85",
    "transactionHash": "0x16ba146983945bb2cb5e01b3ae96d4ed78999f3091e00e8eacc2eab7815be77c",
    "logs": [],
    "blockNumber": 10242837,
    "cumulativeGasUsed": "9798101",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Secret Project",
    "sPROJECT",
    "0x5F0f9484B5F1C9Cd9A27D86B894a10132551a7ac",
    "0x4A482FFFD21490557E169F9b81F9C66162281961"
  ],
  "numDeployments": 4,
  "solcInputHash": "15cf6f9c82f61495548680af4f5dcf82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_syntheticLootAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_syntheticLootCharacterAssetsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimOther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"renderOrder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticLootCharacter.sol\":\"SyntheticLootCharacter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363435393839383330373930\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/SyntheticLootCharacter.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./abstract/ClaimableSynthetic.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./external/SyntheticLoot.sol\\\";\\nimport \\\"./interfaces/ISyntheticLootCharacterAssets.sol\\\";\\n\\ncontract SyntheticLootCharacter is ClaimableSynthetic {\\n\\n    using Strings for string;\\n\\n    string[8] public renderOrder = [\\n        \\\"weapon\\\",\\n        \\\"chest\\\",\\n        \\\"head\\\",\\n        \\\"waist\\\",\\n        \\\"foot\\\",\\n        \\\"hand\\\",\\n        \\\"neck\\\",\\n        \\\"ring\\\"\\n    ];\\n\\n    string public constant cid = \\\"QmbcKUu71Jh64tuJ41fWaLj4XRSkp3umYfaRRpnbjMxeH3\\\";\\n\\n    SyntheticLoot syntheticLoot;\\n    ISyntheticLootCharacterAssets assets;\\n    string[] gateways;\\n\\n    constructor (string memory _name, string memory _symbol, address _syntheticLootAddress, address _syntheticLootCharacterAssetsAddress) ERC721(_name, _symbol) {\\n        syntheticLoot = SyntheticLoot(_syntheticLootAddress);\\n        assets = ISyntheticLootCharacterAssets(_syntheticLootCharacterAssetsAddress);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        address walletAddress = getAddress(tokenId);\\n\\n        // TODO: Render all components, only getting names for now\\n        string memory svg = string.concat(\\n            '<svg viewBox=\\\"0 0 50 50\\\" width=\\\"1000\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n            getDefs(), \\n            getCharacter(walletAddress), \\n            '</svg>'\\n        );\\n\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Bag 0x', toAsciiString(walletAddress), '\\\", \\\"description\\\": \\\"Loot is randomized adventurer gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use Loot in any way you want.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(svg)), '\\\"}'))));\\n        string memory output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    function getSpritesheetElement(string memory _id, string memory _imageData) internal pure returns (string memory) {\\n        return string.concat('<svg width=\\\"50\\\" height=\\\"50\\\" viewBox=\\\"100 0 50 50\\\"><image id=\\\"', _id, '\\\" preserveAspectRatio=\\\"xMinYMin slice\\\" href=\\\"', _imageData, '\\\" /></svg>');\\n    }\\n\\n    function getDefs() internal pure returns (string memory) {\\n        return string.concat(\\n            '<defs>',\\n                getStyle(),\\n            '</defs>'\\n        );\\n    }\\n\\n    function getStyle() internal pure returns (string memory) {\\n        return '<style> img { image-rendering: -webkit-optimize-contrast; image-rendering: crisp-edges; image-rendering: pixelated; height: 50px;} svg { background : #1A1A1A; } </style>';\\n    }\\n\\n    function getItemElement(string memory _id, string memory _spritesheetData) internal pure returns (string memory) {\\n        return string.concat(\\n            '<svg width=\\\"50\\\" height=\\\"50\\\" viewBox=\\\"', _id, ' 0 50 50\\\">', \\n                '<foreignObject width=\\\"10000\\\" height=\\\"50\\\">',\\n                    '<img xmlns=\\\"http://www.w3.org/1999/xhtml\\\" src=\\\"',  _spritesheetData,'\\\" />',\\n                '</foreignObject>',\\n            '</svg>'\\n        );\\n    }\\n\\n    function getCharacter(address walletAddress) internal view returns (string memory) {\\n        return string.concat(\\n            getItemElement(\\\"0\\\", assets.skeleton()),\\n            getItemElement(Strings.toString(syntheticLoot.weaponComponents(walletAddress)[0]*assets.itemSize()), assets.weapon()),\\n            getItemElement(Strings.toString(syntheticLoot.chestComponents(walletAddress)[0]*assets.itemSize()), assets.chest()),\\n            getItemElement(Strings.toString(syntheticLoot.headComponents(walletAddress)[0]*assets.itemSize()), assets.head()),\\n            getItemElement(Strings.toString(syntheticLoot.waistComponents(walletAddress)[0]*assets.itemSize()), assets.waist()),\\n            getItemElement(Strings.toString(syntheticLoot.footComponents(walletAddress)[0]*assets.itemSize()), assets.foot()),\\n            getItemElement(Strings.toString(syntheticLoot.handComponents(walletAddress)[0]*assets.itemSize()), assets.hand()),\\n            getItemElement(Strings.toString(syntheticLoot.neckComponents(walletAddress)[0]*assets.itemSize()), assets.neck()),\\n            getItemElement(Strings.toString(syntheticLoot.ringComponents(walletAddress)[0]*assets.itemSize()), assets.ring())\\n        );\\n    }\\n\\n    /*\\n    *   Utils\\n    */\\n\\n    // https://ethereum.stackexchange.com/a/8447\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/8447\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n    \\n}\",\"keccak256\":\"0x8202d6fe4a18ca8a68428e25d3a06eee5c2ab7808a5955f6c80f45e6360a56f0\",\"license\":\"GPL-3.0\"},\"contracts/abstract/ClaimableSynthetic.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\n\\nabstract contract ClaimableSynthetic is ERC721 {\\n\\n  uint256 public immutable claimPrice = 0.02 ether;\\n  // address public immutable withdrawAddress; // TODO: Withdrawal\\n  // address immutable ensReverseAddress;\\n  string public constant claimMessage = \\\"Message to claim\\\";\\n  mapping(address => bool) public claimed;\\n\\n  function claim() public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    _safeMint(msg.sender, getTokenID(msg.sender));\\n    claimed[msg.sender] = true;\\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(msg.sender).transfer(refund);\\n    }\\n  }\\n\\n  function claimOther(address _signer, bytes memory _signature) public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    require(verify(_signer, claimMessage, _signature), \\\"Invalid signature\\\");\\n\\n    _safeMint(msg.sender, getTokenID(_signer));\\n    claimed[_signer] = true;\\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(_signer).transfer(refund);\\n    }\\n  }\\n\\n  function _tokenURI(address _address) public view returns (string memory) {\\n      return tokenURI(getTokenID(_address));\\n  }\\n\\n  function getTokenID(address _address) public pure returns (uint256) {\\n      return uint256(uint160(_address));\\n  }\\n\\n  function getAddress(uint256 id) public pure returns (address) {\\n      return address(uint160(id));\\n  }\\n\\n  // ECDSA\\n\\n  function getMessageHash(\\n    string memory _message\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_message));\\n  }\\n\\n  function getEthSignedMessageHash(bytes32 _messageHash)\\n    public\\n    pure \\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n      );\\n  }\\n\\n  function verify(\\n    address _signer,\\n    string memory _message,\\n    bytes memory signature\\n  ) public pure returns (bool) {\\n    bytes32 messageHash = getMessageHash(_message);\\n    bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n    return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n  }\\n\\n  function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n    public\\n    pure\\n    returns (address)\\n  {\\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n    return ecrecover(_ethSignedMessageHash, v, r, s);\\n  }\\n\\n  function splitSignature(bytes memory sig)\\n    public\\n    pure\\n    returns (\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    )\\n  {\\n    require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n    assembly {\\n      // first 32 bytes, after the length prefix\\n      r := mload(add(sig, 32))\\n      // second 32 bytes\\n      s := mload(add(sig, 64))\\n      // final byte (first byte of the next 32 bytes)\\n      v := byte(0, mload(add(sig, 96)))\\n    }\\n  }\\n}\",\"keccak256\":\"0xa1f2747eef5b1b7990f2467a1c6eef1d31e640b9a9cde54daa9a92128b985c91\",\"license\":\"Unlicense\"},\"contracts/external/SyntheticLoot.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-09-01\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n\\n    Synthetic Loot\\n    \\n    This contract creates a \\\"virtual NFT\\\" of Loot based\\n    on a given wallet address. \\n    \\n    Because the wallet address is used as the deterministic \\n    seed, there can only be one Loot bag per wallet. \\n    \\n    Because it's not a real NFT, there is no \\n    minting, transferability, etc.\\n    \\n    Creators building on top of Loot can choose to recognize \\n    Synthetic Loot as a way to allow a wider range of \\n    adventurers to participate in the ecosystem, while\\n    still being able to differentiate between \\n    \\\"original\\\" Loot and Synthetic Loot.\\n    \\n    Anyone with an Ethereum wallet has Synthetic Loot.\\n    \\n    -----\\n    \\n    Also optionally returns data in LootComponents format:\\n    \\n    Call weaponComponents(), chestComponents(), etc. to get \\n    an array of attributes that correspond to the item. \\n    \\n    The return format is:\\n    \\n    uint256[5] =>\\n        [0] = Item ID\\n        [1] = Suffix ID (0 for none)\\n        [2] = Name Prefix ID (0 for none)\\n        [3] = Name Suffix ID (0 for none)\\n        [4] = Augmentation (0 = false, 1 = true)\\n    \\n    See the item and attribute tables below for corresponding IDs.\\n    \\n    The original LootComponents contract is at address:\\n    0x3eb43b1545a360d1D065CB7539339363dFD445F3\\n\\n*/\\n\\npragma solidity ^0.8.4;\\n\\ncontract SyntheticLoot {\\n\\n    string[] private weapons = [\\n        \\\"Warhammer\\\",            // 0\\n        \\\"Quarterstaff\\\",         // 1\\n        \\\"Maul\\\",                 // 2\\n        \\\"Mace\\\",                 // 3\\n        \\\"Club\\\",                 // 4\\n        \\\"Katana\\\",               // 5\\n        \\\"Falchion\\\",             // 6\\n        \\\"Scimitar\\\",             // 7\\n        \\\"Long Sword\\\",           // 8\\n        \\\"Short Sword\\\",          // 9\\n        \\\"Ghost Wand\\\",           // 10\\n        \\\"Grave Wand\\\",           // 11\\n        \\\"Bone Wand\\\",            // 12\\n        \\\"Wand\\\",                 // 13\\n        \\\"Grimoire\\\",             // 14\\n        \\\"Chronicle\\\",            // 15\\n        \\\"Tome\\\",                 // 16\\n        \\\"Book\\\"                  // 17\\n    ];\\n    \\n    string[] private chestArmor = [\\n        \\\"Divine Robe\\\",          // 0\\n        \\\"Silk Robe\\\",            // 1\\n        \\\"Linen Robe\\\",           // 2\\n        \\\"Robe\\\",                 // 3\\n        \\\"Shirt\\\",                // 4\\n        \\\"Demon Husk\\\",           // 5\\n        \\\"Dragonskin Armor\\\",     // 6\\n        \\\"Studded Leather Armor\\\",// 7\\n        \\\"Hard Leather Armor\\\",   // 8\\n        \\\"Leather Armor\\\",        // 9\\n        \\\"Holy Chestplate\\\",      // 10\\n        \\\"Ornate Chestplate\\\",    // 11\\n        \\\"Plate Mail\\\",           // 12\\n        \\\"Chain Mail\\\",           // 13\\n        \\\"Ring Mail\\\"             // 14\\n    ];\\n    \\n    string[] private headArmor = [\\n        \\\"Ancient Helm\\\",         // 0\\n        \\\"Ornate Helm\\\",          // 1\\n        \\\"Great Helm\\\",           // 2\\n        \\\"Full Helm\\\",            // 3\\n        \\\"Helm\\\",                 // 4\\n        \\\"Demon Crown\\\",          // 5\\n        \\\"Dragon's Crown\\\",       // 6\\n        \\\"War Cap\\\",              // 7\\n        \\\"Leather Cap\\\",          // 8\\n        \\\"Cap\\\",                  // 9\\n        \\\"Crown\\\",                // 10\\n        \\\"Divine Hood\\\",          // 11\\n        \\\"Silk Hood\\\",            // 12\\n        \\\"Linen Hood\\\",           // 13\\n        \\\"Hood\\\"                  // 14\\n    ];\\n    \\n    string[] private waistArmor = [\\n        \\\"Ornate Belt\\\",          // 0\\n        \\\"War Belt\\\",             // 1\\n        \\\"Plated Belt\\\",          // 2\\n        \\\"Mesh Belt\\\",            // 3\\n        \\\"Heavy Belt\\\",           // 4\\n        \\\"Demonhide Belt\\\",       // 5\\n        \\\"Dragonskin Belt\\\",      // 6\\n        \\\"Studded Leather Belt\\\", // 7\\n        \\\"Hard Leather Belt\\\",    // 8\\n        \\\"Leather Belt\\\",         // 9\\n        \\\"Brightsilk Sash\\\",      // 10\\n        \\\"Silk Sash\\\",            // 11\\n        \\\"Wool Sash\\\",            // 12\\n        \\\"Linen Sash\\\",           // 13\\n        \\\"Sash\\\"                  // 14\\n    ];\\n    \\n    string[] private footArmor = [\\n        \\\"Holy Greaves\\\",         // 0\\n        \\\"Ornate Greaves\\\",       // 1\\n        \\\"Greaves\\\",              // 2\\n        \\\"Chain Boots\\\",          // 3\\n        \\\"Heavy Boots\\\",          // 4\\n        \\\"Demonhide Boots\\\",      // 5\\n        \\\"Dragonskin Boots\\\",     // 6\\n        \\\"Studded Leather Boots\\\",// 7\\n        \\\"Hard Leather Boots\\\",   // 8\\n        \\\"Leather Boots\\\",        // 9\\n        \\\"Divine Slippers\\\",      // 10\\n        \\\"Silk Slippers\\\",        // 11\\n        \\\"Wool Shoes\\\",           // 12\\n        \\\"Linen Shoes\\\",          // 13\\n        \\\"Shoes\\\"                 // 14\\n    ];\\n    \\n    string[] private handArmor = [\\n        \\\"Holy Gauntlets\\\",       // 0\\n        \\\"Ornate Gauntlets\\\",     // 1\\n        \\\"Gauntlets\\\",            // 2\\n        \\\"Chain Gloves\\\",         // 3\\n        \\\"Heavy Gloves\\\",         // 4\\n        \\\"Demon's Hands\\\",        // 5\\n        \\\"Dragonskin Gloves\\\",    // 6\\n        \\\"Studded Leather Gloves\\\",// 7\\n        \\\"Hard Leather Gloves\\\",  // 8\\n        \\\"Leather Gloves\\\",       // 9\\n        \\\"Divine Gloves\\\",        // 10\\n        \\\"Silk Gloves\\\",          // 11\\n        \\\"Wool Gloves\\\",          // 12\\n        \\\"Linen Gloves\\\",         // 13\\n        \\\"Gloves\\\"                // 14\\n    ];\\n    \\n    string[] private necklaces = [\\n        \\\"Necklace\\\",             // 0\\n        \\\"Amulet\\\",               // 1\\n        \\\"Pendant\\\"               // 2\\n    ];\\n    \\n    string[] private rings = [\\n        \\\"Gold Ring\\\",            // 0\\n        \\\"Silver Ring\\\",          // 1\\n        \\\"Bronze Ring\\\",          // 2\\n        \\\"Platinum Ring\\\",        // 3\\n        \\\"Titanium Ring\\\"         // 4\\n    ];\\n    \\n    string[] private suffixes = [\\n        // <no suffix>          // 0\\n        \\\"of Power\\\",             // 1\\n        \\\"of Giants\\\",            // 2\\n        \\\"of Titans\\\",            // 3\\n        \\\"of Skill\\\",             // 4\\n        \\\"of Perfection\\\",        // 5\\n        \\\"of Brilliance\\\",        // 6\\n        \\\"of Enlightenment\\\",     // 7\\n        \\\"of Protection\\\",        // 8\\n        \\\"of Anger\\\",             // 9\\n        \\\"of Rage\\\",              // 10\\n        \\\"of Fury\\\",              // 11\\n        \\\"of Vitriol\\\",           // 12\\n        \\\"of the Fox\\\",           // 13\\n        \\\"of Detection\\\",         // 14\\n        \\\"of Reflection\\\",        // 15\\n        \\\"of the Twins\\\"          // 16\\n    ];\\n    \\n    string[] private namePrefixes = [\\n        // <no name>            // 0\\n        \\\"Agony\\\",                // 1\\n        \\\"Apocalypse\\\",           // 2\\n        \\\"Armageddon\\\",           // 3\\n        \\\"Beast\\\",                // 4\\n        \\\"Behemoth\\\",             // 5\\n        \\\"Blight\\\",               // 6\\n        \\\"Blood\\\",                // 7\\n        \\\"Bramble\\\",              // 8\\n        \\\"Brimstone\\\",            // 9\\n        \\\"Brood\\\",                // 10\\n        \\\"Carrion\\\",              // 11\\n        \\\"Cataclysm\\\",            // 12\\n        \\\"Chimeric\\\",             // 13\\n        \\\"Corpse\\\",               // 14\\n        \\\"Corruption\\\",           // 15\\n        \\\"Damnation\\\",            // 16\\n        \\\"Death\\\",                // 17\\n        \\\"Demon\\\",                // 18\\n        \\\"Dire\\\",                 // 19\\n        \\\"Dragon\\\",               // 20\\n        \\\"Dread\\\",                // 21\\n        \\\"Doom\\\",                 // 22\\n        \\\"Dusk\\\",                 // 23\\n        \\\"Eagle\\\",                // 24\\n        \\\"Empyrean\\\",             // 25\\n        \\\"Fate\\\",                 // 26\\n        \\\"Foe\\\",                  // 27\\n        \\\"Gale\\\",                 // 28\\n        \\\"Ghoul\\\",                // 29\\n        \\\"Gloom\\\",                // 30\\n        \\\"Glyph\\\",                // 31\\n        \\\"Golem\\\",                // 32\\n        \\\"Grim\\\",                 // 33\\n        \\\"Hate\\\",                 // 34\\n        \\\"Havoc\\\",                // 35\\n        \\\"Honour\\\",               // 36\\n        \\\"Horror\\\",               // 37\\n        \\\"Hypnotic\\\",             // 38\\n        \\\"Kraken\\\",               // 39\\n        \\\"Loath\\\",                // 40\\n        \\\"Maelstrom\\\",            // 41\\n        \\\"Mind\\\",                 // 42\\n        \\\"Miracle\\\",              // 43\\n        \\\"Morbid\\\",               // 44\\n        \\\"Oblivion\\\",             // 45\\n        \\\"Onslaught\\\",            // 46\\n        \\\"Pain\\\",                 // 47\\n        \\\"Pandemonium\\\",          // 48\\n        \\\"Phoenix\\\",              // 49\\n        \\\"Plague\\\",               // 50\\n        \\\"Rage\\\",                 // 51\\n        \\\"Rapture\\\",              // 52\\n        \\\"Rune\\\",                 // 53\\n        \\\"Skull\\\",                // 54\\n        \\\"Sol\\\",                  // 55\\n        \\\"Soul\\\",                 // 56\\n        \\\"Sorrow\\\",               // 57\\n        \\\"Spirit\\\",               // 58\\n        \\\"Storm\\\",                // 59\\n        \\\"Tempest\\\",              // 60\\n        \\\"Torment\\\",              // 61\\n        \\\"Vengeance\\\",            // 62\\n        \\\"Victory\\\",              // 63\\n        \\\"Viper\\\",                // 64\\n        \\\"Vortex\\\",               // 65\\n        \\\"Woe\\\",                  // 66\\n        \\\"Wrath\\\",                // 67\\n        \\\"Light's\\\",              // 68\\n        \\\"Shimmering\\\"            // 69  \\n    ];\\n    \\n    string[] private nameSuffixes = [\\n        // <no name>            // 0\\n        \\\"Bane\\\",                 // 1\\n        \\\"Root\\\",                 // 2\\n        \\\"Bite\\\",                 // 3\\n        \\\"Song\\\",                 // 4\\n        \\\"Roar\\\",                 // 5\\n        \\\"Grasp\\\",                // 6\\n        \\\"Instrument\\\",           // 7\\n        \\\"Glow\\\",                 // 8\\n        \\\"Bender\\\",               // 9\\n        \\\"Shadow\\\",               // 10\\n        \\\"Whisper\\\",              // 11\\n        \\\"Shout\\\",                // 12\\n        \\\"Growl\\\",                // 13\\n        \\\"Tear\\\",                 // 14\\n        \\\"Peak\\\",                 // 15\\n        \\\"Form\\\",                 // 16\\n        \\\"Sun\\\",                  // 17\\n        \\\"Moon\\\"                  // 18\\n    ];\\n    \\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n    \\n    function weaponComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"WEAPON\\\", weapons);\\n    }\\n    \\n    function chestComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"CHEST\\\", chestArmor);\\n    }\\n    \\n    function headComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"HEAD\\\", headArmor);\\n    }\\n    \\n    function waistComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"WAIST\\\", waistArmor);\\n    }\\n\\n    function footComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"FOOT\\\", footArmor);\\n    }\\n    \\n    function handComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"HAND\\\", handArmor);\\n    }\\n    \\n    function neckComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"NECK\\\", necklaces);\\n    }\\n    \\n    function ringComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"RING\\\", rings);\\n    }\\n    \\n    function getWeapon(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"WEAPON\\\", weapons);\\n    }\\n    \\n    function getChest(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"CHEST\\\", chestArmor);\\n    }\\n    \\n    function getHead(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"HEAD\\\", headArmor);\\n    }\\n    \\n    function getWaist(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"WAIST\\\", waistArmor);\\n    }\\n\\n    function getFoot(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"FOOT\\\", footArmor);\\n    }\\n    \\n    function getHand(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"HAND\\\", handArmor);\\n    }\\n    \\n    function getNeck(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"NECK\\\", necklaces);\\n    }\\n    \\n    function getRing(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"RING\\\", rings);\\n    }\\n    \\n    function pluckName(address walletAddress, string memory keyPrefix, string[] memory sourceArray) internal view returns (string memory) {\\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(walletAddress))));\\n        string memory output = sourceArray[rand % sourceArray.length];\\n        uint256 greatness = rand % 21;\\n        if (greatness > 14) {\\n            output = string(abi.encodePacked(output, \\\" \\\", suffixes[rand % suffixes.length]));\\n        }\\n        if (greatness >= 19) {\\n            string[2] memory name;\\n            name[0] = namePrefixes[rand % namePrefixes.length];\\n            name[1] = nameSuffixes[rand % nameSuffixes.length];\\n            if (greatness == 19) {\\n                output = string(abi.encodePacked('\\\"', name[0], ' ', name[1], '\\\" ', output));\\n            } else {\\n                output = string(abi.encodePacked('\\\"', name[0], ' ', name[1], '\\\" ', output, \\\" +1\\\"));\\n            }\\n        }\\n        return output;\\n    }\\n\\n    function pluck(address walletAddress, string memory keyPrefix, string[] memory sourceArray) internal view returns (uint256[5] memory) {\\n        uint256[5] memory components;\\n        \\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(walletAddress))));\\n        \\n        components[0] = rand % sourceArray.length;\\n        components[1] = 0;\\n        components[2] = 0;\\n        \\n        uint256 greatness = rand % 21;\\n        if (greatness > 14) {\\n            components[1] = (rand % suffixes.length) + 1;\\n        }\\n        if (greatness >= 19) {\\n            components[2] = (rand % namePrefixes.length) + 1;\\n            components[3] = (rand % nameSuffixes.length) + 1;\\n            if (greatness == 19) {\\n                // ...\\n            } else {\\n                components[4] = 1;\\n            }\\n        }\\n        return components;\\n    }\\n    \\n    function tokenURI(address walletAddress) public view returns (string memory) {\\n        string[17] memory parts;\\n        parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n\\n        parts[1] = getWeapon(walletAddress);\\n\\n        parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\n\\n        parts[3] = getChest(walletAddress);\\n\\n        parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\n\\n        parts[5] = getHead(walletAddress);\\n\\n        parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">';\\n\\n        parts[7] = getWaist(walletAddress);\\n\\n        parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">';\\n\\n        parts[9] = getFoot(walletAddress);\\n\\n        parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"base\\\">';\\n\\n        parts[11] = getHand(walletAddress);\\n\\n        parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"base\\\">';\\n\\n        parts[13] = getNeck(walletAddress);\\n\\n        parts[14] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"base\\\">';\\n\\n        parts[15] = getRing(walletAddress);\\n\\n        parts[16] = '</text></svg>';\\n\\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\n        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Bag 0x', toAsciiString(walletAddress), '\\\", \\\"description\\\": \\\"Loot is randomized adventurer gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use Loot in any way you want.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n    \\n    // https://ethereum.stackexchange.com/a/8447\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n    \\n    // https://ethereum.stackexchange.com/a/8447\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0x28b606972ebe708827f57c7181b5d0cdd17de6271b9313ae357c5eee7aa350cf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticLootCharacterAssets.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface ISyntheticLootCharacterAssets {\\n    function itemSize() external view returns (uint256);\\n    function skeleton() external view returns (string memory);\\n    function weapon() external view returns (string memory);\\n    function chest() external view returns (string memory);\\n    function head() external view returns (string memory);\\n    function waist() external view returns (string memory);\\n    function foot() external view returns (string memory);\\n    function hand() external view returns (string memory);\\n    function neck() external view returns (string memory);\\n    function ring() external view returns (string memory);\\n}\",\"keccak256\":\"0xcfaa7d876a810fd02725630cee794dcb655fe264e620e1841e2ed645c2ca812f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c806397aba7f9116100ec578063b88d4fde1161008a578063c884ef8311610064578063c884ef8314610664578063d75c9c0d146106a1578063e985e9c5146106de578063fa5408011461071b576101b7565b8063b88d4fde146105c1578063b93f9b0a146105ea578063c87b56dd14610627576101b7565b8063a7bb5803116100c6578063a7bb5803146104dd578063aa3ec0a91461051c578063af4fb35314610547578063b446f3b214610584576101b7565b806397aba7f91461045b5780639d4776b214610498578063a22cb465146104b4576101b7565b80633b85df72116101595780636352211e116101335780636352211e1461037957806363f8071c146103b657806370a08231146103f357806395d89b4114610430576101b7565b80633b85df721461031b57806342842e0e146103465780634e71d92d1461036f576101b7565b8063095ea7b311610195578063095ea7b31461026157806315d655c91461028a57806323b872dd146102b55780632dd34f0f146102de576101b7565b806301ffc9a7146101bc57806306fdde03146101f9578063081812fc14610224575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de91906133d3565b610758565b6040516101f0919061341b565b60405180910390f35b34801561020557600080fd5b5061020e6107ea565b60405161021b91906134cf565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190613527565b610878565b6040516102589190613595565b60405180910390f35b34801561026d57600080fd5b50610288600480360381019061028391906135dc565b6108ab565b005b34801561029657600080fd5b5061029f610a94565b6040516102ac919061362b565b60405180910390f35b3480156102c157600080fd5b506102dc60048036038101906102d79190613646565b610ab8565b005b3480156102ea57600080fd5b506103056004803603810190610300919061386f565b610eb8565b604051610312919061341b565b60405180910390f35b34801561032757600080fd5b50610330610f16565b60405161033d91906134cf565b60405180910390f35b34801561035257600080fd5b5061036d60048036038101906103689190613646565b610f4f565b005b610377611087565b005b34801561038557600080fd5b506103a0600480360381019061039b9190613527565b6111d8565b6040516103ad9190613595565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d891906138fa565b61120b565b6040516103ea919061362b565b60405180910390f35b3480156103ff57600080fd5b5061041a600480360381019061041591906138fa565b61122b565b604051610427919061362b565b60405180910390f35b34801561043c57600080fd5b50610445611243565b60405161045291906134cf565b60405180910390f35b34801561046757600080fd5b50610482600480360381019061047d919061395d565b6112d1565b60405161048f9190613595565b60405180910390f35b6104b260048036038101906104ad91906139b9565b611340565b005b3480156104c057600080fd5b506104db60048036038101906104d69190613a41565b611512565b005b3480156104e957600080fd5b5061050460048036038101906104ff9190613a81565b61160f565b60405161051393929190613af5565b60405180910390f35b34801561052857600080fd5b50610531611677565b60405161053e91906134cf565b60405180910390f35b34801561055357600080fd5b5061056e600480360381019061056991906138fa565b611693565b60405161057b91906134cf565b60405180910390f35b34801561059057600080fd5b506105ab60048036038101906105a69190613b2c565b6116ad565b6040516105b89190613b75565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e39190613b90565b6116dd565b005b3480156105f657600080fd5b50610611600480360381019061060c9190613527565b611818565b60405161061e9190613595565b60405180910390f35b34801561063357600080fd5b5061064e60048036038101906106499190613527565b611822565b60405161065b91906134cf565b60405180910390f35b34801561067057600080fd5b5061068b600480360381019061068691906138fa565b6118d4565b604051610698919061341b565b60405180910390f35b3480156106ad57600080fd5b506106c860048036038101906106c39190613527565b6118f4565b6040516106d591906134cf565b60405180910390f35b3480156106ea57600080fd5b5061070560048036038101906107009190613c13565b611997565b604051610712919061341b565b60405180910390f35b34801561072757600080fd5b50610742600480360381019061073d9190613c53565b6119c6565b60405161074f9190613b75565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107b357506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107e35750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546107f790613caf565b80601f016020809104026020016040519081016040528092919081815260200182805461082390613caf565b80156108705780601f1061084557610100808354040283529160200191610870565b820191906000526020600020905b81548152906001019060200180831161085357829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109a35750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d990613d2d565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5090613d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc090613e05565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610c6157506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610cf25750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890613d2d565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080610ec4846116ad565b90506000610ed1826119c6565b90508573ffffffffffffffffffffffffffffffffffffffff16610ef482866112d1565b73ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b6040518060400160405280601081526020017f4d65737361676520746f20636c61696d0000000000000000000000000000000081525081565b610f5a838383610ab8565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611043575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610fdf93929190613e5c565b6020604051808303816000875af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190613ebb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107990613f34565b60405180910390fd5b505050565b7f00000000000000000000000000000000000000000000000000000000000000003410156110ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e190613fa0565b60405180910390fd5b6110fc336110f73361120b565b6119f6565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060007f0000000000000000000000000000000000000000000000000000000000000000346111829190613fef565b905060008111156111d5573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156111d3573d6000803e3d6000fd5b505b50565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60026020528060005260406000206000915090505481565b6001805461125090613caf565b80601f016020809104026020016040519081016040528092919081815260200182805461127c90613caf565b80156112c95780601f1061129e576101008083540402835291602001916112c9565b820191906000526020600020905b8154815290600101906020018083116112ac57829003601f168201915b505050505081565b6000806000806112e08561160f565b925092509250600186828585604051600081526020016040526040516113099493929190614023565b6020604051602081039080840390855afa15801561132b573d6000803e3d6000fd5b50505060206040510351935050505092915050565b7f00000000000000000000000000000000000000000000000000000000000000003410156113a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139a90613fa0565b60405180910390fd5b6113e3826040518060400160405280601081526020017f4d65737361676520746f20636c61696d0000000000000000000000000000000081525083610eb8565b611422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611419906140b4565b60405180910390fd5b6114343361142f8461120b565b6119f6565b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060007f0000000000000000000000000000000000000000000000000000000000000000346114ba9190613fef565b9050600081111561150d578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561150b573d6000803e3d6000fd5b505b505050565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611603919061341b565b60405180910390a35050565b60008060006041845114611658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164f90614120565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6040518060600160405280602e81526020016150a0602e913981565b60606116a66116a18361120b565b611822565b9050919050565b6000816040516020016116c0919061417c565b604051602081830303815290604052805190602001209050919050565b6116e8848484610ab8565b60008373ffffffffffffffffffffffffffffffffffffffff163b14806117d3575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b815260040161176f94939291906141d7565b6020604051808303816000875af115801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190613ebb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180990613f34565b60405180910390fd5b50505050565b6000819050919050565b6060600061182f83611818565b9050600061183b611b2d565b61184483611b5b565b6040516020016118559291906142e1565b604051602081830303815290604052905060006118a261187484612c06565b61187d84612dc9565b60405160200161188e92919061450f565b604051602081830303815290604052612dc9565b90506000816040516020016118b791906145a0565b604051602081830303815290604052905080945050505050919050565b60066020528060005260406000206000915054906101000a900460ff1681565b6007816008811061190457600080fd5b01600091509050805461191690613caf565b80601f016020809104026020016040519081016040528092919081815260200182805461194290613caf565b801561198f5780601f106119645761010080835404028352916020019161198f565b820191906000526020600020905b81548152906001019060200180831161197257829003601f168201915b505050505081565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000816040516020016119d9919061462f565b604051602081830303815290604052805190602001209050919050565b611a008282612f61565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611aea575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611a8693929190613e5c565b6020604051808303816000875af1158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190613ebb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2090613f34565b60405180910390fd5b5050565b6060611b37613174565b604051602001611b4791906146a1565b604051602081830303815290604052905090565b6060611c316040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385ead00a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611c03573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611c2c9190614746565b613194565b611e26611d8b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc891906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c390589876040518263ffffffff1660e01b8152600401611d239190613595565b60a060405180830381865afa158015611d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d649190614887565b600060058110611d7757611d766148b4565b5b6020020151611d8691906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a2b1d216040518163ffffffff1660e01b8152600401600060405180830381865afa158015611df8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e219190614746565b613194565b61201b611f80601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebd91906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396a7bb85886040518263ffffffff1660e01b8152600401611f189190613595565b60a060405180830381865afa158015611f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f599190614887565b600060058110611f6c57611f6b6148b4565b5b6020020151611f7b91906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166364026ac06040518163ffffffff1660e01b8152600401600060405180830381865afa158015611fed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120169190614746565b613194565b612210612175601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561208e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b291906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d9d7cc2896040518263ffffffff1660e01b815260040161210d9190613595565b60a060405180830381865afa15801561212a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e9190614887565b600060058110612161576121606148b4565b5b602002015161217091906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f7dcfa36040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061220b9190614746565b613194565b61240461236a601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a791906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663455ba9ca8a6040518263ffffffff1660e01b81526004016123029190613595565b60a060405180830381865afa15801561231f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123439190614887565b600060058110612356576123556148b4565b5b602002015161236591906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16624162006040518163ffffffff1660e01b8152600401600060405180830381865afa1580156123d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123ff9190614746565b613194565b6125f961255e601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249b91906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5fb5fa48b6040518263ffffffff1660e01b81526004016124f69190613595565b60a060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125379190614887565b60006005811061254a576125496148b4565b5b602002015161255991906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad56f7196040518163ffffffff1660e01b8152600401600060405180830381865afa1580156125cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125f49190614746565b613194565b6127ee612753601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269091906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357e3d14d8c6040518263ffffffff1660e01b81526004016126eb9190613595565b60a060405180830381865afa158015612708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272c9190614887565b60006005811061273f5761273e6148b4565b5b602002015161274e91906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638df6fbcc6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156127c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127e99190614746565b613194565b6129e3612948601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288591906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4630ab08d6040518263ffffffff1660e01b81526004016128e09190613595565b60a060405180830381865afa1580156128fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129219190614887565b600060058110612934576129336148b4565b5b602002015161294391906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb7633856040518163ffffffff1660e01b8152600401600060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129de9190614746565b613194565b612bd8612b3d601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307a2f9556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7a91906147a4565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e73702cf8e6040518263ffffffff1660e01b8152600401612ad59190613595565b60a060405180830381865afa158015612af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b169190614887565b600060058110612b2957612b286148b4565b5b6020020151612b3891906148e3565b6131c0565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638360c1856040518163ffffffff1660e01b8152600401600060405180830381865afa158015612baa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612bd39190614746565b613194565b604051602001612bf09998979695949392919061493d565b6040516020818303038152906040529050919050565b60606000602867ffffffffffffffff811115612c2557612c246136a3565b5b6040519080825280601f01601f191660200182016040528015612c575781602001600182028036833780820191505090505b50905060005b6014811015612dbf576000816013612c759190613fef565b6008612c8191906148e3565b6002612c8d9190614aef565b8573ffffffffffffffffffffffffffffffffffffffff16612cae9190614b69565b60f81b9050600060108260f81c612cc59190614b9a565b60f81b905060008160f81c6010612cdc9190614bcb565b8360f81c612cea9190614c06565b60f81b9050612cf882613321565b85856002612d0691906148e3565b81518110612d1757612d166148b4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612d4f81613321565b856001866002612d5f91906148e3565b612d699190614c3a565b81518110612d7a57612d796148b4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080612db790614c90565b915050612c5d565b5080915050919050565b60606000825190506000811415612df25760405180602001604052806000815250915050612f5c565b60006003600283612e039190614c3a565b612e0d9190614b69565b6004612e1991906148e3565b90506000602082612e2a9190614c3a565b67ffffffffffffffff811115612e4357612e426136a3565b5b6040519080825280601f01601f191660200182016040528015612e755781602001600182028036833780820191505090505b50905060006040518060600160405280604081526020016150ce604091399050600181016020830160005b86811015612f195760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b90508084526004840193505050612ea0565b506003860660018114612f335760028114612f4357612f4e565b613d3d60f01b6002830352612f4e565b603d60f81b60018303525b508484525050819450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fc890613e05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161306a90614d25565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60606040518060e0016040528060a98152602001614ff760a99139905090565b606082826040516020016131a9929190614f0d565b604051602081830303815290604052905092915050565b60606000821415613208576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061331c565b600082905060005b6000821461323a57808061322390614c90565b915050600a826132339190614b69565b9150613210565b60008167ffffffffffffffff811115613256576132556136a3565b5b6040519080825280601f01601f1916602001820160405280156132885781602001600182028036833780820191505090505b5090505b60008514613315576001826132a19190613fef565b9150600a856132b09190614f8e565b60306132bc9190614c3a565b60f81b8183815181106132d2576132d16148b4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561330e9190614b69565b945061328c565b8093505050505b919050565b6000600a8260f81c60ff16101561334c5760308260f81c6133429190614fbf565b60f81b9050613362565b60578260f81c61335c9190614fbf565b60f81b90505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6133b08161337b565b81146133bb57600080fd5b50565b6000813590506133cd816133a7565b92915050565b6000602082840312156133e9576133e8613371565b5b60006133f7848285016133be565b91505092915050565b60008115159050919050565b61341581613400565b82525050565b6000602082019050613430600083018461340c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613470578082015181840152602081019050613455565b8381111561347f576000848401525b50505050565b6000601f19601f8301169050919050565b60006134a182613436565b6134ab8185613441565b93506134bb818560208601613452565b6134c481613485565b840191505092915050565b600060208201905081810360008301526134e98184613496565b905092915050565b6000819050919050565b613504816134f1565b811461350f57600080fd5b50565b600081359050613521816134fb565b92915050565b60006020828403121561353d5761353c613371565b5b600061354b84828501613512565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061357f82613554565b9050919050565b61358f81613574565b82525050565b60006020820190506135aa6000830184613586565b92915050565b6135b981613574565b81146135c457600080fd5b50565b6000813590506135d6816135b0565b92915050565b600080604083850312156135f3576135f2613371565b5b6000613601858286016135c7565b925050602061361285828601613512565b9150509250929050565b613625816134f1565b82525050565b6000602082019050613640600083018461361c565b92915050565b60008060006060848603121561365f5761365e613371565b5b600061366d868287016135c7565b935050602061367e868287016135c7565b925050604061368f86828701613512565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136db82613485565b810181811067ffffffffffffffff821117156136fa576136f96136a3565b5b80604052505050565b600061370d613367565b905061371982826136d2565b919050565b600067ffffffffffffffff821115613739576137386136a3565b5b61374282613485565b9050602081019050919050565b82818337600083830152505050565b600061377161376c8461371e565b613703565b90508281526020810184848401111561378d5761378c61369e565b5b61379884828561374f565b509392505050565b600082601f8301126137b5576137b4613699565b5b81356137c584826020860161375e565b91505092915050565b600067ffffffffffffffff8211156137e9576137e86136a3565b5b6137f282613485565b9050602081019050919050565b600061381261380d846137ce565b613703565b90508281526020810184848401111561382e5761382d61369e565b5b61383984828561374f565b509392505050565b600082601f83011261385657613855613699565b5b81356138668482602086016137ff565b91505092915050565b60008060006060848603121561388857613887613371565b5b6000613896868287016135c7565b935050602084013567ffffffffffffffff8111156138b7576138b6613376565b5b6138c3868287016137a0565b925050604084013567ffffffffffffffff8111156138e4576138e3613376565b5b6138f086828701613841565b9150509250925092565b6000602082840312156139105761390f613371565b5b600061391e848285016135c7565b91505092915050565b6000819050919050565b61393a81613927565b811461394557600080fd5b50565b60008135905061395781613931565b92915050565b6000806040838503121561397457613973613371565b5b600061398285828601613948565b925050602083013567ffffffffffffffff8111156139a3576139a2613376565b5b6139af85828601613841565b9150509250929050565b600080604083850312156139d0576139cf613371565b5b60006139de858286016135c7565b925050602083013567ffffffffffffffff8111156139ff576139fe613376565b5b613a0b85828601613841565b9150509250929050565b613a1e81613400565b8114613a2957600080fd5b50565b600081359050613a3b81613a15565b92915050565b60008060408385031215613a5857613a57613371565b5b6000613a66858286016135c7565b9250506020613a7785828601613a2c565b9150509250929050565b600060208284031215613a9757613a96613371565b5b600082013567ffffffffffffffff811115613ab557613ab4613376565b5b613ac184828501613841565b91505092915050565b613ad381613927565b82525050565b600060ff82169050919050565b613aef81613ad9565b82525050565b6000606082019050613b0a6000830186613aca565b613b176020830185613aca565b613b246040830184613ae6565b949350505050565b600060208284031215613b4257613b41613371565b5b600082013567ffffffffffffffff811115613b6057613b5f613376565b5b613b6c848285016137a0565b91505092915050565b6000602082019050613b8a6000830184613aca565b92915050565b60008060008060808587031215613baa57613ba9613371565b5b6000613bb8878288016135c7565b9450506020613bc9878288016135c7565b9350506040613bda87828801613512565b925050606085013567ffffffffffffffff811115613bfb57613bfa613376565b5b613c0787828801613841565b91505092959194509250565b60008060408385031215613c2a57613c29613371565b5b6000613c38858286016135c7565b9250506020613c49858286016135c7565b9150509250929050565b600060208284031215613c6957613c68613371565b5b6000613c7784828501613948565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613cc757607f821691505b60208210811415613cdb57613cda613c80565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000613d17600e83613441565b9150613d2282613ce1565b602082019050919050565b60006020820190508181036000830152613d4681613d0a565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000613d83600a83613441565b9150613d8e82613d4d565b602082019050919050565b60006020820190508181036000830152613db281613d76565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000613def601183613441565b9150613dfa82613db9565b602082019050919050565b60006020820190508181036000830152613e1e81613de2565b9050919050565b600082825260208201905092915050565b50565b6000613e46600083613e25565b9150613e5182613e36565b600082019050919050565b6000608082019050613e716000830186613586565b613e7e6020830185613586565b613e8b604083018461361c565b8181036060830152613e9c81613e39565b9050949350505050565b600081519050613eb5816133a7565b92915050565b600060208284031215613ed157613ed0613371565b5b6000613edf84828501613ea6565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000613f1e601083613441565b9150613f2982613ee8565b602082019050919050565b60006020820190508181036000830152613f4d81613f11565b9050919050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b6000613f8a601483613441565b9150613f9582613f54565b602082019050919050565b60006020820190508181036000830152613fb981613f7d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ffa826134f1565b9150614005836134f1565b92508282101561401857614017613fc0565b5b828203905092915050565b60006080820190506140386000830187613aca565b6140456020830186613ae6565b6140526040830185613aca565b61405f6060830184613aca565b95945050505050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061409e601183613441565b91506140a982614068565b602082019050919050565b600060208201905081810360008301526140cd81614091565b9050919050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b600061410a601883613441565b9150614115826140d4565b602082019050919050565b60006020820190508181036000830152614139816140fd565b9050919050565b600081905092915050565b600061415682613436565b6141608185614140565b9350614170818560208601613452565b80840191505092915050565b6000614188828461414b565b915081905092915050565b600081519050919050565b60006141a982614193565b6141b38185613e25565b93506141c3818560208601613452565b6141cc81613485565b840191505092915050565b60006080820190506141ec6000830187613586565b6141f96020830186613586565b614206604083018561361c565b8181036060830152614218818461419e565b905095945050505050565b7f3c7376672076696577426f783d22302030203530203530222077696474683d2260008201527f313030302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3260208201527f3030302f737667223e0000000000000000000000000000000000000000000000604082015250565b60006142a5604983614140565b91506142b082614223565b604982019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b60006142ec82614298565b91506142f8828561414b565b9150614304828461414b565b915061430f826142bb565b6006820191508190509392505050565b7f7b226e616d65223a202242616720307800000000000000000000000000000000600082015250565b6000614355601083614140565b91506143608261431f565b601082019050919050565b7f222c20226465736372697074696f6e223a20224c6f6f742069732072616e646f60008201527f6d697a656420616476656e747572657220676561722067656e6572617465642060208201527f616e642073746f726564206f6e20636861696e2e2053746174732c20696d616760408201527f65732c20616e64206f746865722066756e6374696f6e616c697479206172652060608201527f696e74656e74696f6e616c6c79206f6d697474656420666f72206f746865727360808201527f20746f20696e746572707265742e204665656c206672656520746f207573652060a08201527f4c6f6f7420696e20616e792077617920796f752077616e742e222c2022696d6160c08201527f6765223a2022646174613a696d6167652f7376672b786d6c3b6261736536342c60e082015250565b60006144ac61010083614140565b91506144b78261436b565b61010082019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006144f9600283614140565b9150614504826144c3565b600282019050919050565b600061451a82614348565b9150614526828561414b565b91506145318261449e565b915061453d828461414b565b9150614548826144ec565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b600061458a601d83614140565b915061459582614554565b601d82019050919050565b60006145ab8261457d565b91506145b7828461414b565b915081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006145f8601c83614140565b9150614603826145c2565b601c82019050919050565b6000819050919050565b61462961462482613927565b61460e565b82525050565b600061463a826145eb565b91506146468284614618565b60208201915081905092915050565b7f3c646566733e0000000000000000000000000000000000000000000000000000815250565b7f3c2f646566733e00000000000000000000000000000000000000000000000000815250565b60006146ac82614655565b6006820191506146bc828461414b565b91506146c78261467b565b60078201915081905092915050565b60006146e96146e48461371e565b613703565b9050828152602081018484840111156147055761470461369e565b5b614710848285613452565b509392505050565b600082601f83011261472d5761472c613699565b5b815161473d8482602086016146d6565b91505092915050565b60006020828403121561475c5761475b613371565b5b600082015167ffffffffffffffff81111561477a57614779613376565b5b61478684828501614718565b91505092915050565b60008151905061479e816134fb565b92915050565b6000602082840312156147ba576147b9613371565b5b60006147c88482850161478f565b91505092915050565b600067ffffffffffffffff8211156147ec576147eb6136a3565b5b602082029050919050565b600080fd5b600061480f61480a846147d1565b613703565b90508060208402830185811115614829576148286147f7565b5b835b81811015614852578061483e888261478f565b84526020840193505060208101905061482b565b5050509392505050565b600082601f83011261487157614870613699565b5b600561487e8482856147fc565b91505092915050565b600060a0828403121561489d5761489c613371565b5b60006148ab8482850161485c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006148ee826134f1565b91506148f9836134f1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561493257614931613fc0565b5b828202905092915050565b6000614949828c61414b565b9150614955828b61414b565b9150614961828a61414b565b915061496d828961414b565b9150614979828861414b565b9150614985828761414b565b9150614991828661414b565b915061499d828561414b565b91506149a9828461414b565b91508190509a9950505050505050505050565b60008160011c9050919050565b6000808291508390505b6001851115614a13578086048111156149ef576149ee613fc0565b5b60018516156149fe5780820291505b8081029050614a0c856149bc565b94506149d3565b94509492505050565b600082614a2c5760019050614ae8565b81614a3a5760009050614ae8565b8160018114614a505760028114614a5a57614a89565b6001915050614ae8565b60ff841115614a6c57614a6b613fc0565b5b8360020a915084821115614a8357614a82613fc0565b5b50614ae8565b5060208310610133831016604e8410600b8410161715614abe5782820a905083811115614ab957614ab8613fc0565b5b614ae8565b614acb84848460016149c9565b92509050818404811115614ae257614ae1613fc0565b5b81810290505b9392505050565b6000614afa826134f1565b9150614b05836134f1565b9250614b327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614a1c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b74826134f1565b9150614b7f836134f1565b925082614b8f57614b8e614b3a565b5b828204905092915050565b6000614ba582613ad9565b9150614bb083613ad9565b925082614bc057614bbf614b3a565b5b828204905092915050565b6000614bd682613ad9565b9150614be183613ad9565b92508160ff0483118215151615614bfb57614bfa613fc0565b5b828202905092915050565b6000614c1182613ad9565b9150614c1c83613ad9565b925082821015614c2f57614c2e613fc0565b5b828203905092915050565b6000614c45826134f1565b9150614c50836134f1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614c8557614c84613fc0565b5b828201905092915050565b6000614c9b826134f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614cce57614ccd613fc0565b5b600182019050919050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000614d0f600e83613441565b9150614d1a82614cd9565b602082019050919050565b60006020820190508181036000830152614d3e81614d02565b9050919050565b7f3c7376672077696474683d22353022206865696768743d22353022207669657760008201527f426f783d22000000000000000000000000000000000000000000000000000000602082015250565b6000614da1602583614140565b9150614dac82614d45565b602582019050919050565b7f2030203530203530223e00000000000000000000000000000000000000000000815250565b7f3c666f726569676e4f626a6563742077696474683d223130303030222068656960008201527f6768743d223530223e0000000000000000000000000000000000000000000000602082015250565b6000614e39602983614140565b9150614e4482614ddd565b602982019050919050565b7f3c696d6720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313960008201527f39392f7868746d6c22207372633d220000000000000000000000000000000000602082015250565b6000614eab602f83614140565b9150614eb682614e4f565b602f82019050919050565b7f22202f3e00000000000000000000000000000000000000000000000000000000815250565b7f3c2f666f726569676e4f626a6563743e00000000000000000000000000000000815250565b6000614f1882614d94565b9150614f24828561414b565b9150614f2f82614db7565b600a82019150614f3e82614e2c565b9150614f4982614e9e565b9150614f55828461414b565b9150614f6082614ec1565b600482019150614f6f82614ee7565b601082019150614f7e826142bb565b6006820191508190509392505050565b6000614f99826134f1565b9150614fa4836134f1565b925082614fb457614fb3614b3a565b5b828206905092915050565b6000614fca82613ad9565b9150614fd583613ad9565b92508260ff03821115614feb57614fea613fc0565b5b82820190509291505056fe3c7374796c653e20696d67207b20696d6167652d72656e646572696e673a202d7765626b69742d6f7074696d697a652d636f6e74726173743b20696d6167652d72656e646572696e673a2063726973702d65646765733b20696d6167652d72656e646572696e673a20706978656c617465643b206865696768743a20353070783b7d20737667207b206261636b67726f756e64203a20233141314131413b207d203c2f7374796c653e516d62634b557537314a68363474754a34316657614c6a345852536b7033756d5966615252706e626a4d786548334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212206fb0cefc36a182e4d138dc669dac4741f40252034cc34d16264139fc22568bed64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 231,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 233,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 244,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 248,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 252,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 258,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1279,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "claimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 742,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "renderOrder",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)8_storage"
      },
      {
        "astId": 748,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "syntheticLoot",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(SyntheticLoot)2714"
      },
      {
        "astId": 751,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "assets",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(ISyntheticLootCharacterAssets)2823"
      },
      {
        "astId": 754,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "gateways",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)8_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISyntheticLootCharacterAssets)2823": {
        "encoding": "inplace",
        "label": "contract ISyntheticLootCharacterAssets",
        "numberOfBytes": "20"
      },
      "t_contract(SyntheticLoot)2714": {
        "encoding": "inplace",
        "label": "contract SyntheticLoot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}