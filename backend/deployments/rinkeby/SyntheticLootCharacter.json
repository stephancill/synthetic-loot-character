{
  "address": "0xEAf3735e5A7C45732D805D63d1ddA421420135E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_syntheticLootAddress",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_gateways",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimOther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "getComponentFilenames",
      "outputs": [
        {
          "internalType": "uint256[8]",
          "name": "",
          "type": "uint256[8]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "renderOrder",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x60c0149586b613e5f8055a370d49de4749b95980745a30f4d02a5e95bd6490e2",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0xEAf3735e5A7C45732D805D63d1ddA421420135E2",
    "transactionIndex": 4,
    "gasUsed": "4362764",
    "logsBloom": "0x
    "blockHash": "0x5b2a78d33b457bf59249e777a104ea8be73b9fafb21d59e5aa43287c7a2127a4",
    "transactionHash": "0x60c0149586b613e5f8055a370d49de4749b95980745a30f4d02a5e95bd6490e2",
    "logs": [],
    "blockNumber": 10236987,
    "cumulativeGasUsed": "6925048",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Synthetic Loot Character",
    "sLOOTCHARACTER",
    "0xee496c365f99e6dDd0D5807321E7838FD5F3b694",
    [
      "https://ipfs.io/ipfs/",
      "https://ipfs.infura.io/ipfs/",
      "https://dweb.link/ipfs/"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "ae6007c3c39806a4cc462e77738fef99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_syntheticLootAddress\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_gateways\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimOther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getComponentFilenames\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"renderOrder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticLootCharacter.sol\":\"SyntheticLootCharacter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/SyntheticLootCharacter.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./abstract/ClaimableSynthetic.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./external/SyntheticLoot.sol\\\";\\n\\ncontract SyntheticLootCharacter is ClaimableSynthetic {\\n\\n    using Strings for string;\\n\\n    string[8] public renderOrder = [\\n        \\\"weapon\\\",\\n        \\\"chest\\\",\\n        \\\"head\\\",\\n        \\\"waist\\\",\\n        \\\"foot\\\",\\n        \\\"hand\\\",\\n        \\\"neck\\\",\\n        \\\"ring\\\"\\n    ];\\n\\n    string public constant cid = \\\"QmbcKUu71Jh64tuJ41fWaLj4XRSkp3umYfaRRpnbjMxeH3\\\";\\n\\n    SyntheticLoot syntheticLoot;\\n    string[] gateways;\\n\\n    constructor (string memory _name, string memory _symbol, address _syntheticLootAddress, string[] memory _gateways) ERC721(_name, _symbol) {\\n        syntheticLoot = SyntheticLoot(_syntheticLootAddress);\\n        gateways = _gateways;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        address walletAddress = getAddress(tokenId);\\n        string memory gateway = gateways[block.number % gateways.length];\\n        \\n\\n        // TODO: Render all components, only getting names for now\\n        uint[8] memory componentNames = getComponentFilenames(walletAddress);\\n\\n        string memory svg = '<svg preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 500 500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">';\\n\\n        svg = string.concat(svg, '<image width=\\\"500\\\" href=\\\"', gateway, cid, '/bg.png', '\\\"/>');\\n        svg = string.concat(svg, '<image width=\\\"500\\\" href=\\\"', gateway, cid, '/fg.png', '\\\"/>');\\n\\n        for (uint256 i = 0; i < componentNames.length; i++) {\\n            string memory url = string.concat(gateway, cid, '/', renderOrder[i], '/name/', Strings.toString(componentNames[i]), '.png');\\n            string memory image = string.concat('<image width=\\\"500\\\" href=\\\"', url, '\\\"/>');\\n            svg = string.concat(svg, image);\\n        }\\n\\n        svg = string.concat(svg, '</svg>');\\n\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Bag 0x', toAsciiString(walletAddress), '\\\", \\\"description\\\": \\\"Loot is randomized adventurer gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use Loot in any way you want.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(svg)), '\\\"}'))));\\n        string memory output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    function getComponentFilenames(address walletAddress) public view returns (uint[8] memory) {\\n        // return [\\n        //     processName(syntheticLoot.getWeapon(walletAddress)),\\n        //     processName(syntheticLoot.getChest(walletAddress)),\\n        //     processName(syntheticLoot.getHead(walletAddress)),\\n        //     processName(syntheticLoot.getWaist(walletAddress)),\\n        //     processName(syntheticLoot.getFoot(walletAddress)),\\n        //     processName(syntheticLoot.getHand(walletAddress)),\\n        //     processName(syntheticLoot.getNeck(walletAddress)),\\n        //     processName(syntheticLoot.getRing(walletAddress))\\n        // ];\\n        return [\\n            syntheticLoot.weaponComponents(walletAddress)[0],\\n            syntheticLoot.chestComponents(walletAddress)[0],\\n            syntheticLoot.headComponents(walletAddress)[0],\\n            syntheticLoot.waistComponents(walletAddress)[0],\\n            syntheticLoot.footComponents(walletAddress)[0],\\n            syntheticLoot.handComponents(walletAddress)[0],\\n            syntheticLoot.neckComponents(walletAddress)[0],\\n            syntheticLoot.ringComponents(walletAddress)[0]\\n        ];\\n    }\\n\\n    /*\\n    *   Utils\\n    */\\n    function processName(string memory _base) internal pure returns (string memory) {\\n        bytes memory base = bytes(_base);\\n        bytes memory out;\\n        for (uint256 i = 0; i < base.length; i++) {\\n            if (base[i] != 0x22) {\\n                out = bytes.concat(out, _lowerUnderscore(base[i]));\\n            }\\n        }\\n        return string(out);\\n    }\\n\\n    function _lowerUnderscore(bytes1 _b1)\\n        private\\n        pure\\n        returns (bytes1) {\\n\\n        if (_b1 == 0x20) {\\n            return bytes1(0x5f);\\n        }\\n\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/8447\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/8447\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    \\n}\",\"keccak256\":\"0xe1ae0b6c39027a3cbe8d451c8fe6d9632282c2d33af89095fbc6bdef9d071d1a\",\"license\":\"GPL-3.0\"},\"contracts/abstract/ClaimableSynthetic.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\n\\nabstract contract ClaimableSynthetic is ERC721 {\\n\\n  uint256 public immutable claimPrice = 0.02 ether;\\n  // address public immutable withdrawAddress; // TODO: Withdrawal\\n  // address immutable ensReverseAddress;\\n  string public constant claimMessage = \\\"Message to claim\\\";\\n  mapping(address => bool) public claimed;\\n\\n  function claim() public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    _safeMint(msg.sender, getTokenID(msg.sender));\\n    claimed[msg.sender] = true;\\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(msg.sender).transfer(refund);\\n    }\\n  }\\n\\n  function claimOther(address _signer, bytes memory _signature) public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    require(verify(_signer, claimMessage, _signature), \\\"Invalid signature\\\");\\n\\n    _safeMint(msg.sender, getTokenID(_signer));\\n    claimed[_signer] = true;\\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(_signer).transfer(refund);\\n    }\\n  }\\n\\n  function _tokenURI(address _address) public view returns (string memory) {\\n      return tokenURI(getTokenID(_address));\\n  }\\n\\n  function getTokenID(address _address) public pure returns (uint256) {\\n      return uint256(uint160(_address));\\n  }\\n\\n  function getAddress(uint256 id) public pure returns (address) {\\n      return address(uint160(id));\\n  }\\n\\n  // ECDSA\\n\\n  function getMessageHash(\\n    string memory _message\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_message));\\n  }\\n\\n  function getEthSignedMessageHash(bytes32 _messageHash)\\n    public\\n    pure \\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n      );\\n  }\\n\\n  function verify(\\n    address _signer,\\n    string memory _message,\\n    bytes memory signature\\n  ) public pure returns (bool) {\\n    bytes32 messageHash = getMessageHash(_message);\\n    bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n    return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n  }\\n\\n  function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n    public\\n    pure\\n    returns (address)\\n  {\\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n    return ecrecover(_ethSignedMessageHash, v, r, s);\\n  }\\n\\n  function splitSignature(bytes memory sig)\\n    public\\n    pure\\n    returns (\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    )\\n  {\\n    require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n    assembly {\\n      // first 32 bytes, after the length prefix\\n      r := mload(add(sig, 32))\\n      // second 32 bytes\\n      s := mload(add(sig, 64))\\n      // final byte (first byte of the next 32 bytes)\\n      v := byte(0, mload(add(sig, 96)))\\n    }\\n  }\\n}\",\"keccak256\":\"0xa1f2747eef5b1b7990f2467a1c6eef1d31e640b9a9cde54daa9a92128b985c91\",\"license\":\"Unlicense\"},\"contracts/external/SyntheticLoot.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-09-01\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n\\n    Synthetic Loot\\n    \\n    This contract creates a \\\"virtual NFT\\\" of Loot based\\n    on a given wallet address. \\n    \\n    Because the wallet address is used as the deterministic \\n    seed, there can only be one Loot bag per wallet. \\n    \\n    Because it's not a real NFT, there is no \\n    minting, transferability, etc.\\n    \\n    Creators building on top of Loot can choose to recognize \\n    Synthetic Loot as a way to allow a wider range of \\n    adventurers to participate in the ecosystem, while\\n    still being able to differentiate between \\n    \\\"original\\\" Loot and Synthetic Loot.\\n    \\n    Anyone with an Ethereum wallet has Synthetic Loot.\\n    \\n    -----\\n    \\n    Also optionally returns data in LootComponents format:\\n    \\n    Call weaponComponents(), chestComponents(), etc. to get \\n    an array of attributes that correspond to the item. \\n    \\n    The return format is:\\n    \\n    uint256[5] =>\\n        [0] = Item ID\\n        [1] = Suffix ID (0 for none)\\n        [2] = Name Prefix ID (0 for none)\\n        [3] = Name Suffix ID (0 for none)\\n        [4] = Augmentation (0 = false, 1 = true)\\n    \\n    See the item and attribute tables below for corresponding IDs.\\n    \\n    The original LootComponents contract is at address:\\n    0x3eb43b1545a360d1D065CB7539339363dFD445F3\\n\\n*/\\n\\npragma solidity ^0.8.4;\\n\\ncontract SyntheticLoot {\\n\\n    string[] private weapons = [\\n        \\\"Warhammer\\\",            // 0\\n        \\\"Quarterstaff\\\",         // 1\\n        \\\"Maul\\\",                 // 2\\n        \\\"Mace\\\",                 // 3\\n        \\\"Club\\\",                 // 4\\n        \\\"Katana\\\",               // 5\\n        \\\"Falchion\\\",             // 6\\n        \\\"Scimitar\\\",             // 7\\n        \\\"Long Sword\\\",           // 8\\n        \\\"Short Sword\\\",          // 9\\n        \\\"Ghost Wand\\\",           // 10\\n        \\\"Grave Wand\\\",           // 11\\n        \\\"Bone Wand\\\",            // 12\\n        \\\"Wand\\\",                 // 13\\n        \\\"Grimoire\\\",             // 14\\n        \\\"Chronicle\\\",            // 15\\n        \\\"Tome\\\",                 // 16\\n        \\\"Book\\\"                  // 17\\n    ];\\n    \\n    string[] private chestArmor = [\\n        \\\"Divine Robe\\\",          // 0\\n        \\\"Silk Robe\\\",            // 1\\n        \\\"Linen Robe\\\",           // 2\\n        \\\"Robe\\\",                 // 3\\n        \\\"Shirt\\\",                // 4\\n        \\\"Demon Husk\\\",           // 5\\n        \\\"Dragonskin Armor\\\",     // 6\\n        \\\"Studded Leather Armor\\\",// 7\\n        \\\"Hard Leather Armor\\\",   // 8\\n        \\\"Leather Armor\\\",        // 9\\n        \\\"Holy Chestplate\\\",      // 10\\n        \\\"Ornate Chestplate\\\",    // 11\\n        \\\"Plate Mail\\\",           // 12\\n        \\\"Chain Mail\\\",           // 13\\n        \\\"Ring Mail\\\"             // 14\\n    ];\\n    \\n    string[] private headArmor = [\\n        \\\"Ancient Helm\\\",         // 0\\n        \\\"Ornate Helm\\\",          // 1\\n        \\\"Great Helm\\\",           // 2\\n        \\\"Full Helm\\\",            // 3\\n        \\\"Helm\\\",                 // 4\\n        \\\"Demon Crown\\\",          // 5\\n        \\\"Dragon's Crown\\\",       // 6\\n        \\\"War Cap\\\",              // 7\\n        \\\"Leather Cap\\\",          // 8\\n        \\\"Cap\\\",                  // 9\\n        \\\"Crown\\\",                // 10\\n        \\\"Divine Hood\\\",          // 11\\n        \\\"Silk Hood\\\",            // 12\\n        \\\"Linen Hood\\\",           // 13\\n        \\\"Hood\\\"                  // 14\\n    ];\\n    \\n    string[] private waistArmor = [\\n        \\\"Ornate Belt\\\",          // 0\\n        \\\"War Belt\\\",             // 1\\n        \\\"Plated Belt\\\",          // 2\\n        \\\"Mesh Belt\\\",            // 3\\n        \\\"Heavy Belt\\\",           // 4\\n        \\\"Demonhide Belt\\\",       // 5\\n        \\\"Dragonskin Belt\\\",      // 6\\n        \\\"Studded Leather Belt\\\", // 7\\n        \\\"Hard Leather Belt\\\",    // 8\\n        \\\"Leather Belt\\\",         // 9\\n        \\\"Brightsilk Sash\\\",      // 10\\n        \\\"Silk Sash\\\",            // 11\\n        \\\"Wool Sash\\\",            // 12\\n        \\\"Linen Sash\\\",           // 13\\n        \\\"Sash\\\"                  // 14\\n    ];\\n    \\n    string[] private footArmor = [\\n        \\\"Holy Greaves\\\",         // 0\\n        \\\"Ornate Greaves\\\",       // 1\\n        \\\"Greaves\\\",              // 2\\n        \\\"Chain Boots\\\",          // 3\\n        \\\"Heavy Boots\\\",          // 4\\n        \\\"Demonhide Boots\\\",      // 5\\n        \\\"Dragonskin Boots\\\",     // 6\\n        \\\"Studded Leather Boots\\\",// 7\\n        \\\"Hard Leather Boots\\\",   // 8\\n        \\\"Leather Boots\\\",        // 9\\n        \\\"Divine Slippers\\\",      // 10\\n        \\\"Silk Slippers\\\",        // 11\\n        \\\"Wool Shoes\\\",           // 12\\n        \\\"Linen Shoes\\\",          // 13\\n        \\\"Shoes\\\"                 // 14\\n    ];\\n    \\n    string[] private handArmor = [\\n        \\\"Holy Gauntlets\\\",       // 0\\n        \\\"Ornate Gauntlets\\\",     // 1\\n        \\\"Gauntlets\\\",            // 2\\n        \\\"Chain Gloves\\\",         // 3\\n        \\\"Heavy Gloves\\\",         // 4\\n        \\\"Demon's Hands\\\",        // 5\\n        \\\"Dragonskin Gloves\\\",    // 6\\n        \\\"Studded Leather Gloves\\\",// 7\\n        \\\"Hard Leather Gloves\\\",  // 8\\n        \\\"Leather Gloves\\\",       // 9\\n        \\\"Divine Gloves\\\",        // 10\\n        \\\"Silk Gloves\\\",          // 11\\n        \\\"Wool Gloves\\\",          // 12\\n        \\\"Linen Gloves\\\",         // 13\\n        \\\"Gloves\\\"                // 14\\n    ];\\n    \\n    string[] private necklaces = [\\n        \\\"Necklace\\\",             // 0\\n        \\\"Amulet\\\",               // 1\\n        \\\"Pendant\\\"               // 2\\n    ];\\n    \\n    string[] private rings = [\\n        \\\"Gold Ring\\\",            // 0\\n        \\\"Silver Ring\\\",          // 1\\n        \\\"Bronze Ring\\\",          // 2\\n        \\\"Platinum Ring\\\",        // 3\\n        \\\"Titanium Ring\\\"         // 4\\n    ];\\n    \\n    string[] private suffixes = [\\n        // <no suffix>          // 0\\n        \\\"of Power\\\",             // 1\\n        \\\"of Giants\\\",            // 2\\n        \\\"of Titans\\\",            // 3\\n        \\\"of Skill\\\",             // 4\\n        \\\"of Perfection\\\",        // 5\\n        \\\"of Brilliance\\\",        // 6\\n        \\\"of Enlightenment\\\",     // 7\\n        \\\"of Protection\\\",        // 8\\n        \\\"of Anger\\\",             // 9\\n        \\\"of Rage\\\",              // 10\\n        \\\"of Fury\\\",              // 11\\n        \\\"of Vitriol\\\",           // 12\\n        \\\"of the Fox\\\",           // 13\\n        \\\"of Detection\\\",         // 14\\n        \\\"of Reflection\\\",        // 15\\n        \\\"of the Twins\\\"          // 16\\n    ];\\n    \\n    string[] private namePrefixes = [\\n        // <no name>            // 0\\n        \\\"Agony\\\",                // 1\\n        \\\"Apocalypse\\\",           // 2\\n        \\\"Armageddon\\\",           // 3\\n        \\\"Beast\\\",                // 4\\n        \\\"Behemoth\\\",             // 5\\n        \\\"Blight\\\",               // 6\\n        \\\"Blood\\\",                // 7\\n        \\\"Bramble\\\",              // 8\\n        \\\"Brimstone\\\",            // 9\\n        \\\"Brood\\\",                // 10\\n        \\\"Carrion\\\",              // 11\\n        \\\"Cataclysm\\\",            // 12\\n        \\\"Chimeric\\\",             // 13\\n        \\\"Corpse\\\",               // 14\\n        \\\"Corruption\\\",           // 15\\n        \\\"Damnation\\\",            // 16\\n        \\\"Death\\\",                // 17\\n        \\\"Demon\\\",                // 18\\n        \\\"Dire\\\",                 // 19\\n        \\\"Dragon\\\",               // 20\\n        \\\"Dread\\\",                // 21\\n        \\\"Doom\\\",                 // 22\\n        \\\"Dusk\\\",                 // 23\\n        \\\"Eagle\\\",                // 24\\n        \\\"Empyrean\\\",             // 25\\n        \\\"Fate\\\",                 // 26\\n        \\\"Foe\\\",                  // 27\\n        \\\"Gale\\\",                 // 28\\n        \\\"Ghoul\\\",                // 29\\n        \\\"Gloom\\\",                // 30\\n        \\\"Glyph\\\",                // 31\\n        \\\"Golem\\\",                // 32\\n        \\\"Grim\\\",                 // 33\\n        \\\"Hate\\\",                 // 34\\n        \\\"Havoc\\\",                // 35\\n        \\\"Honour\\\",               // 36\\n        \\\"Horror\\\",               // 37\\n        \\\"Hypnotic\\\",             // 38\\n        \\\"Kraken\\\",               // 39\\n        \\\"Loath\\\",                // 40\\n        \\\"Maelstrom\\\",            // 41\\n        \\\"Mind\\\",                 // 42\\n        \\\"Miracle\\\",              // 43\\n        \\\"Morbid\\\",               // 44\\n        \\\"Oblivion\\\",             // 45\\n        \\\"Onslaught\\\",            // 46\\n        \\\"Pain\\\",                 // 47\\n        \\\"Pandemonium\\\",          // 48\\n        \\\"Phoenix\\\",              // 49\\n        \\\"Plague\\\",               // 50\\n        \\\"Rage\\\",                 // 51\\n        \\\"Rapture\\\",              // 52\\n        \\\"Rune\\\",                 // 53\\n        \\\"Skull\\\",                // 54\\n        \\\"Sol\\\",                  // 55\\n        \\\"Soul\\\",                 // 56\\n        \\\"Sorrow\\\",               // 57\\n        \\\"Spirit\\\",               // 58\\n        \\\"Storm\\\",                // 59\\n        \\\"Tempest\\\",              // 60\\n        \\\"Torment\\\",              // 61\\n        \\\"Vengeance\\\",            // 62\\n        \\\"Victory\\\",              // 63\\n        \\\"Viper\\\",                // 64\\n        \\\"Vortex\\\",               // 65\\n        \\\"Woe\\\",                  // 66\\n        \\\"Wrath\\\",                // 67\\n        \\\"Light's\\\",              // 68\\n        \\\"Shimmering\\\"            // 69  \\n    ];\\n    \\n    string[] private nameSuffixes = [\\n        // <no name>            // 0\\n        \\\"Bane\\\",                 // 1\\n        \\\"Root\\\",                 // 2\\n        \\\"Bite\\\",                 // 3\\n        \\\"Song\\\",                 // 4\\n        \\\"Roar\\\",                 // 5\\n        \\\"Grasp\\\",                // 6\\n        \\\"Instrument\\\",           // 7\\n        \\\"Glow\\\",                 // 8\\n        \\\"Bender\\\",               // 9\\n        \\\"Shadow\\\",               // 10\\n        \\\"Whisper\\\",              // 11\\n        \\\"Shout\\\",                // 12\\n        \\\"Growl\\\",                // 13\\n        \\\"Tear\\\",                 // 14\\n        \\\"Peak\\\",                 // 15\\n        \\\"Form\\\",                 // 16\\n        \\\"Sun\\\",                  // 17\\n        \\\"Moon\\\"                  // 18\\n    ];\\n    \\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n    \\n    function weaponComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"WEAPON\\\", weapons);\\n    }\\n    \\n    function chestComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"CHEST\\\", chestArmor);\\n    }\\n    \\n    function headComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"HEAD\\\", headArmor);\\n    }\\n    \\n    function waistComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"WAIST\\\", waistArmor);\\n    }\\n\\n    function footComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"FOOT\\\", footArmor);\\n    }\\n    \\n    function handComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"HAND\\\", handArmor);\\n    }\\n    \\n    function neckComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"NECK\\\", necklaces);\\n    }\\n    \\n    function ringComponents(address walletAddress) public view returns (uint256[5] memory) {\\n        return pluck(walletAddress, \\\"RING\\\", rings);\\n    }\\n    \\n    function getWeapon(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"WEAPON\\\", weapons);\\n    }\\n    \\n    function getChest(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"CHEST\\\", chestArmor);\\n    }\\n    \\n    function getHead(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"HEAD\\\", headArmor);\\n    }\\n    \\n    function getWaist(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"WAIST\\\", waistArmor);\\n    }\\n\\n    function getFoot(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"FOOT\\\", footArmor);\\n    }\\n    \\n    function getHand(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"HAND\\\", handArmor);\\n    }\\n    \\n    function getNeck(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"NECK\\\", necklaces);\\n    }\\n    \\n    function getRing(address walletAddress) public view returns (string memory) {\\n        return pluckName(walletAddress, \\\"RING\\\", rings);\\n    }\\n    \\n    function pluckName(address walletAddress, string memory keyPrefix, string[] memory sourceArray) internal view returns (string memory) {\\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(walletAddress))));\\n        string memory output = sourceArray[rand % sourceArray.length];\\n        uint256 greatness = rand % 21;\\n        if (greatness > 14) {\\n            output = string(abi.encodePacked(output, \\\" \\\", suffixes[rand % suffixes.length]));\\n        }\\n        if (greatness >= 19) {\\n            string[2] memory name;\\n            name[0] = namePrefixes[rand % namePrefixes.length];\\n            name[1] = nameSuffixes[rand % nameSuffixes.length];\\n            if (greatness == 19) {\\n                output = string(abi.encodePacked('\\\"', name[0], ' ', name[1], '\\\" ', output));\\n            } else {\\n                output = string(abi.encodePacked('\\\"', name[0], ' ', name[1], '\\\" ', output, \\\" +1\\\"));\\n            }\\n        }\\n        return output;\\n    }\\n\\n    function pluck(address walletAddress, string memory keyPrefix, string[] memory sourceArray) internal view returns (uint256[5] memory) {\\n        uint256[5] memory components;\\n        \\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(walletAddress))));\\n        \\n        components[0] = rand % sourceArray.length;\\n        components[1] = 0;\\n        components[2] = 0;\\n        \\n        uint256 greatness = rand % 21;\\n        if (greatness > 14) {\\n            components[1] = (rand % suffixes.length) + 1;\\n        }\\n        if (greatness >= 19) {\\n            components[2] = (rand % namePrefixes.length) + 1;\\n            components[3] = (rand % nameSuffixes.length) + 1;\\n            if (greatness == 19) {\\n                // ...\\n            } else {\\n                components[4] = 1;\\n            }\\n        }\\n        return components;\\n    }\\n    \\n    function tokenURI(address walletAddress) public view returns (string memory) {\\n        string[17] memory parts;\\n        parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n\\n        parts[1] = getWeapon(walletAddress);\\n\\n        parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\n\\n        parts[3] = getChest(walletAddress);\\n\\n        parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\n\\n        parts[5] = getHead(walletAddress);\\n\\n        parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">';\\n\\n        parts[7] = getWaist(walletAddress);\\n\\n        parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">';\\n\\n        parts[9] = getFoot(walletAddress);\\n\\n        parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"base\\\">';\\n\\n        parts[11] = getHand(walletAddress);\\n\\n        parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"base\\\">';\\n\\n        parts[13] = getNeck(walletAddress);\\n\\n        parts[14] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"base\\\">';\\n\\n        parts[15] = getRing(walletAddress);\\n\\n        parts[16] = '</text></svg>';\\n\\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\n        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Bag 0x', toAsciiString(walletAddress), '\\\", \\\"description\\\": \\\"Loot is randomized adventurer gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use Loot in any way you want.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n    \\n    // https://ethereum.stackexchange.com/a/8447\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n    \\n    // https://ethereum.stackexchange.com/a/8447\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0x28b606972ebe708827f57c7181b5d0cdd17de6271b9313ae357c5eee7aa350cf\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806395d89b41116100f7578063b446f3b211610095578063c884ef8311610064578063c884ef83146106ac578063d75c9c0d146106e9578063e985e9c514610726578063fa54080114610763576101c2565b8063b446f3b2146105cc578063b88d4fde14610609578063b93f9b0a14610632578063c87b56dd1461066f576101c2565b8063a22cb465116100d1578063a22cb465146104fc578063a7bb580314610525578063aa3ec0a914610564578063af4fb3531461058f576101c2565b806395d89b411461047857806397aba7f9146104a35780639d4776b2146104e0576101c2565b80632dd34f0f116101645780634e71d92d1161013e5780634e71d92d146103b75780636352211e146103c157806363f8071c146103fe57806370a082311461043b576101c2565b80632dd34f0f146103265780633b85df721461036357806342842e0e1461038e576101c2565b8063095ea7b3116101a0578063095ea7b31461026c57806315d655c91461029557806323b872dd146102c05780632858d225146102e9576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190612b28565b6107a0565b6040516101fb9190612b70565b60405180910390f35b34801561021057600080fd5b50610219610832565b6040516102269190612c24565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190612c7c565b6108c0565b6040516102639190612cea565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190612d31565b6108f3565b005b3480156102a157600080fd5b506102aa610adc565b6040516102b79190612d80565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190612d9b565b610b00565b005b3480156102f557600080fd5b50610310600480360381019061030b9190612dee565b610f00565b60405161031d9190612ec6565b60405180910390f35b34801561033257600080fd5b5061034d600480360381019061034891906130b8565b6114e1565b60405161035a9190612b70565b60405180910390f35b34801561036f57600080fd5b5061037861153f565b6040516103859190612c24565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b09190612d9b565b611578565b005b6103bf6116b0565b005b3480156103cd57600080fd5b506103e860048036038101906103e39190612c7c565b611801565b6040516103f59190612cea565b60405180910390f35b34801561040a57600080fd5b5061042560048036038101906104209190612dee565b611834565b6040516104329190612d80565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d9190612dee565b611854565b60405161046f9190612d80565b60405180910390f35b34801561048457600080fd5b5061048d61186c565b60405161049a9190612c24565b60405180910390f35b3480156104af57600080fd5b506104ca60048036038101906104c59190613179565b6118fa565b6040516104d79190612cea565b60405180910390f35b6104fa60048036038101906104f591906131d5565b611969565b005b34801561050857600080fd5b50610523600480360381019061051e919061325d565b611b3b565b005b34801561053157600080fd5b5061054c6004803603810190610547919061329d565b611c38565b60405161055b93929190613311565b60405180910390f35b34801561057057600080fd5b50610579611ca0565b6040516105869190612c24565b60405180910390f35b34801561059b57600080fd5b506105b660048036038101906105b19190612dee565b611cbc565b6040516105c39190612c24565b60405180910390f35b3480156105d857600080fd5b506105f360048036038101906105ee9190613348565b611cd6565b6040516106009190613391565b60405180910390f35b34801561061557600080fd5b50610630600480360381019061062b91906133ac565b611d06565b005b34801561063e57600080fd5b5061065960048036038101906106549190612c7c565b611e41565b6040516106669190612cea565b60405180910390f35b34801561067b57600080fd5b5061069660048036038101906106919190612c7c565b611e4b565b6040516106a39190612c24565b60405180910390f35b3480156106b857600080fd5b506106d360048036038101906106ce9190612dee565b61212b565b6040516106e09190612b70565b60405180910390f35b3480156106f557600080fd5b50610710600480360381019061070b9190612c7c565b61214b565b60405161071d9190612c24565b60405180910390f35b34801561073257600080fd5b5061074d6004803603810190610748919061342f565b6121ee565b60405161075a9190612b70565b60405180910390f35b34801561076f57600080fd5b5061078a6004803603810190610785919061346f565b61221d565b6040516107979190613391565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107fb57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061082b5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000805461083f906134cb565b80601f016020809104026020016040519081016040528092919081815260200182805461086b906134cb565b80156108b85780601f1061088d576101008083540402835291602001916108b8565b820191906000526020600020905b81548152906001019060200180831161089b57829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109eb5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2190613549565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b98906135b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890613621565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ca957506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610d3a5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090613549565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610f08612a99565b604051806101000160405280600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c390589856040518263ffffffff1660e01b8152600401610f6f9190612cea565b60a060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb0919061370c565b600060058110610fc357610fc2613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396a7bb85856040518263ffffffff1660e01b81526004016110289190612cea565b60a060405180830381865afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611069919061370c565b60006005811061107c5761107b613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d9d7cc2856040518263ffffffff1660e01b81526004016110e19190612cea565b60a060405180830381865afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611122919061370c565b60006005811061113557611134613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663455ba9ca856040518263ffffffff1660e01b815260040161119a9190612cea565b60a060405180830381865afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db919061370c565b6000600581106111ee576111ed613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5fb5fa4856040518263ffffffff1660e01b81526004016112539190612cea565b60a060405180830381865afa158015611270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611294919061370c565b6000600581106112a7576112a6613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357e3d14d856040518263ffffffff1660e01b815260040161130c9190612cea565b60a060405180830381865afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d919061370c565b6000600581106113605761135f613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4630ab0856040518263ffffffff1660e01b81526004016113c59190612cea565b60a060405180830381865afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611406919061370c565b60006005811061141957611418613739565b5b60200201518152602001600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e73702cf856040518263ffffffff1660e01b815260040161147e9190612cea565b60a060405180830381865afa15801561149b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bf919061370c565b6000600581106114d2576114d1613739565b5b60200201518152509050919050565b6000806114ed84611cd6565b905060006114fa8261221d565b90508573ffffffffffffffffffffffffffffffffffffffff1661151d82866118fa565b73ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b6040518060400160405280601081526020017f4d65737361676520746f20636c61696d0000000000000000000000000000000081525081565b611583838383610b00565b60008273ffffffffffffffffffffffffffffffffffffffff163b148061166c575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b81526004016116089392919061379f565b6020604051808303816000875af1158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b91906137fe565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6116ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a290613877565b60405180910390fd5b505050565b7f0000000000000000000000000000000000000000000000000000000000000000341015611713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170a906138e3565b60405180910390fd5b6117253361172033611834565b61224d565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060007f0000000000000000000000000000000000000000000000000000000000000000346117ab9190613932565b905060008111156117fe573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156117fc573d6000803e3d6000fd5b505b50565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60026020528060005260406000206000915090505481565b60018054611879906134cb565b80601f01602080910402602001604051908101604052809291908181526020018280546118a5906134cb565b80156118f25780601f106118c7576101008083540402835291602001916118f2565b820191906000526020600020905b8154815290600101906020018083116118d557829003601f168201915b505050505081565b60008060008061190985611c38565b925092509250600186828585604051600081526020016040526040516119329493929190613966565b6020604051602081039080840390855afa158015611954573d6000803e3d6000fd5b50505060206040510351935050505092915050565b7f00000000000000000000000000000000000000000000000000000000000000003410156119cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c3906138e3565b60405180910390fd5b611a0c826040518060400160405280601081526020017f4d65737361676520746f20636c61696d00000000000000000000000000000000815250836114e1565b611a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a42906139f7565b60405180910390fd5b611a5d33611a5884611834565b61224d565b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060007f000000000000000000000000000000000000000000000000000000000000000034611ae39190613932565b90506000811115611b36578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611b34573d6000803e3d6000fd5b505b505050565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c2c9190612b70565b60405180910390a35050565b60008060006041845114611c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7890613a63565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6040518060600160405280602e8152602001614652602e913981565b6060611ccf611cca83611834565b611e4b565b9050919050565b600081604051602001611ce99190613abf565b604051602081830303815290604052805190602001209050919050565b611d11848484610b00565b60008373ffffffffffffffffffffffffffffffffffffffff163b1480611dfc575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b8152600401611d989493929190613b1a565b6020604051808303816000875af1158015611db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddb91906137fe565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3290613877565b60405180910390fd5b50505050565b6000819050919050565b60606000611e5883611e41565b905060006010808054905043611e6e9190613b95565b81548110611e7f57611e7e613739565b5b906000526020600020018054611e94906134cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec0906134cb565b8015611f0d5780601f10611ee257610100808354040283529160200191611f0d565b820191906000526020600020905b815481529060010190602001808311611ef057829003601f168201915b505050505090506000611f1f83610f00565b905060006040518060a00160405280606281526020016146c060629139905080836040518060600160405280602e8152602001614652602e9139604051602001611f6b93929190613c38565b604051602081830303815290604052905080836040518060600160405280602e8152602001614652602e9139604051602001611fa993929190613cbc565b604051602081830303815290604052905060005b6008811015612098576000846040518060600160405280602e8152602001614652602e913960078460088110611ff657611ff5613739565b5b0161201787866008811061200d5761200c613739565b5b6020020151612384565b60405160200161202a9493929190613e20565b604051602081830303815290604052905060008160405160200161204e9190613e8b565b60405160208183030381529060405290508381604051602001612072929190613ec0565b60405160208183030381529060405293505050808061209090613ee4565b915050611fbd565b50806040516020016120aa9190613f53565b604051602081830303815290604052905060006120f76120c9866124e5565b6120d2846126a8565b6040516020016120e3929190614169565b6040516020818303038152906040526126a8565b905060008160405160200161210c91906141fa565b6040516020818303038152906040529050809650505050505050919050565b60066020528060005260406000206000915054906101000a900460ff1681565b6007816008811061215b57600080fd5b01600091509050805461216d906134cb565b80601f0160208091040260200160405190810160405280929190818152602001828054612199906134cb565b80156121e65780601f106121bb576101008083540402835291602001916121e6565b820191906000526020600020905b8154815290600101906020018083116121c957829003601f168201915b505050505081565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000816040516020016122309190614289565b604051602081830303815290604052805190602001209050919050565b6122578282612840565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480612341575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b81526004016122dd9392919061379f565b6020604051808303816000875af11580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232091906137fe565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b612380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237790613877565b60405180910390fd5b5050565b606060008214156123cc576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506124e0565b600082905060005b600082146123fe5780806123e790613ee4565b915050600a826123f791906142af565b91506123d4565b60008167ffffffffffffffff81111561241a57612419612eec565b5b6040519080825280601f01601f19166020018201604052801561244c5781602001600182028036833780820191505090505b5090505b600085146124d9576001826124659190613932565b9150600a856124749190613b95565b603061248091906142e0565b60f81b81838151811061249657612495613739565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856124d291906142af565b9450612450565b8093505050505b919050565b60606000602867ffffffffffffffff81111561250457612503612eec565b5b6040519080825280601f01601f1916602001820160405280156125365781602001600182028036833780820191505090505b50905060005b601481101561269e5760008160136125549190613932565b60086125609190614336565b600261256c91906144c3565b8573ffffffffffffffffffffffffffffffffffffffff1661258d91906142af565b60f81b9050600060108260f81c6125a4919061450e565b60f81b905060008160f81c60106125bb919061453f565b8360f81c6125c9919061457a565b60f81b90506125d782612a53565b858560026125e59190614336565b815181106125f6576125f5613739565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061262e81612a53565b85600186600261263e9190614336565b61264891906142e0565b8151811061265957612658613739565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061269690613ee4565b91505061253c565b5080915050919050565b606060008251905060008114156126d1576040518060200160405280600081525091505061283b565b600060036002836126e291906142e0565b6126ec91906142af565b60046126f89190614336565b9050600060208261270991906142e0565b67ffffffffffffffff81111561272257612721612eec565b5b6040519080825280601f01601f1916602001820160405280156127545781602001600182028036833780820191505090505b5090506000604051806060016040528060408152602001614680604091399050600181016020830160005b868110156127f85760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b9050808452600484019350505061277f565b50600386066001811461281257600281146128225761282d565b613d3d60f01b600283035261282d565b603d60f81b60018303525b508484525050819450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a790613621565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612949906145fa565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000600a8260f81c60ff161015612a7e5760308260f81c612a74919061461a565b60f81b9050612a94565b60578260f81c612a8e919061461a565b60f81b90505b919050565b604051806101000160405280600890602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612b0581612ad0565b8114612b1057600080fd5b50565b600081359050612b2281612afc565b92915050565b600060208284031215612b3e57612b3d612ac6565b5b6000612b4c84828501612b13565b91505092915050565b60008115159050919050565b612b6a81612b55565b82525050565b6000602082019050612b856000830184612b61565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612bc5578082015181840152602081019050612baa565b83811115612bd4576000848401525b50505050565b6000601f19601f8301169050919050565b6000612bf682612b8b565b612c008185612b96565b9350612c10818560208601612ba7565b612c1981612bda565b840191505092915050565b60006020820190508181036000830152612c3e8184612beb565b905092915050565b6000819050919050565b612c5981612c46565b8114612c6457600080fd5b50565b600081359050612c7681612c50565b92915050565b600060208284031215612c9257612c91612ac6565b5b6000612ca084828501612c67565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cd482612ca9565b9050919050565b612ce481612cc9565b82525050565b6000602082019050612cff6000830184612cdb565b92915050565b612d0e81612cc9565b8114612d1957600080fd5b50565b600081359050612d2b81612d05565b92915050565b60008060408385031215612d4857612d47612ac6565b5b6000612d5685828601612d1c565b9250506020612d6785828601612c67565b9150509250929050565b612d7a81612c46565b82525050565b6000602082019050612d956000830184612d71565b92915050565b600080600060608486031215612db457612db3612ac6565b5b6000612dc286828701612d1c565b9350506020612dd386828701612d1c565b9250506040612de486828701612c67565b9150509250925092565b600060208284031215612e0457612e03612ac6565b5b6000612e1284828501612d1c565b91505092915050565b600060089050919050565b600081905092915050565b6000819050919050565b612e4481612c46565b82525050565b6000612e568383612e3b565b60208301905092915050565b6000602082019050919050565b612e7881612e1b565b612e828184612e26565b9250612e8d82612e31565b8060005b83811015612ebe578151612ea58782612e4a565b9650612eb083612e62565b925050600181019050612e91565b505050505050565b600061010082019050612edc6000830184612e6f565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f2482612bda565b810181811067ffffffffffffffff82111715612f4357612f42612eec565b5b80604052505050565b6000612f56612abc565b9050612f628282612f1b565b919050565b600067ffffffffffffffff821115612f8257612f81612eec565b5b612f8b82612bda565b9050602081019050919050565b82818337600083830152505050565b6000612fba612fb584612f67565b612f4c565b905082815260208101848484011115612fd657612fd5612ee7565b5b612fe1848285612f98565b509392505050565b600082601f830112612ffe57612ffd612ee2565b5b813561300e848260208601612fa7565b91505092915050565b600067ffffffffffffffff82111561303257613031612eec565b5b61303b82612bda565b9050602081019050919050565b600061305b61305684613017565b612f4c565b90508281526020810184848401111561307757613076612ee7565b5b613082848285612f98565b509392505050565b600082601f83011261309f5761309e612ee2565b5b81356130af848260208601613048565b91505092915050565b6000806000606084860312156130d1576130d0612ac6565b5b60006130df86828701612d1c565b935050602084013567ffffffffffffffff811115613100576130ff612acb565b5b61310c86828701612fe9565b925050604084013567ffffffffffffffff81111561312d5761312c612acb565b5b6131398682870161308a565b9150509250925092565b6000819050919050565b61315681613143565b811461316157600080fd5b50565b6000813590506131738161314d565b92915050565b600080604083850312156131905761318f612ac6565b5b600061319e85828601613164565b925050602083013567ffffffffffffffff8111156131bf576131be612acb565b5b6131cb8582860161308a565b9150509250929050565b600080604083850312156131ec576131eb612ac6565b5b60006131fa85828601612d1c565b925050602083013567ffffffffffffffff81111561321b5761321a612acb565b5b6132278582860161308a565b9150509250929050565b61323a81612b55565b811461324557600080fd5b50565b60008135905061325781613231565b92915050565b6000806040838503121561327457613273612ac6565b5b600061328285828601612d1c565b925050602061329385828601613248565b9150509250929050565b6000602082840312156132b3576132b2612ac6565b5b600082013567ffffffffffffffff8111156132d1576132d0612acb565b5b6132dd8482850161308a565b91505092915050565b6132ef81613143565b82525050565b600060ff82169050919050565b61330b816132f5565b82525050565b600060608201905061332660008301866132e6565b61333360208301856132e6565b6133406040830184613302565b949350505050565b60006020828403121561335e5761335d612ac6565b5b600082013567ffffffffffffffff81111561337c5761337b612acb565b5b61338884828501612fe9565b91505092915050565b60006020820190506133a660008301846132e6565b92915050565b600080600080608085870312156133c6576133c5612ac6565b5b60006133d487828801612d1c565b94505060206133e587828801612d1c565b93505060406133f687828801612c67565b925050606085013567ffffffffffffffff81111561341757613416612acb565b5b6134238782880161308a565b91505092959194509250565b6000806040838503121561344657613445612ac6565b5b600061345485828601612d1c565b925050602061346585828601612d1c565b9150509250929050565b60006020828403121561348557613484612ac6565b5b600061349384828501613164565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806134e357607f821691505b602082108114156134f7576134f661349c565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000613533600e83612b96565b915061353e826134fd565b602082019050919050565b6000602082019050818103600083015261356281613526565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b600061359f600a83612b96565b91506135aa82613569565b602082019050919050565b600060208201905081810360008301526135ce81613592565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b600061360b601183612b96565b9150613616826135d5565b602082019050919050565b6000602082019050818103600083015261363a816135fe565b9050919050565b600067ffffffffffffffff82111561365c5761365b612eec565b5b602082029050919050565b600080fd5b60008151905061367b81612c50565b92915050565b600061369461368f84613641565b612f4c565b905080602084028301858111156136ae576136ad613667565b5b835b818110156136d757806136c3888261366c565b8452602084019350506020810190506136b0565b5050509392505050565b600082601f8301126136f6576136f5612ee2565b5b6005613703848285613681565b91505092915050565b600060a0828403121561372257613721612ac6565b5b6000613730848285016136e1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b50565b6000613789600083613768565b915061379482613779565b600082019050919050565b60006080820190506137b46000830186612cdb565b6137c16020830185612cdb565b6137ce6040830184612d71565b81810360608301526137df8161377c565b9050949350505050565b6000815190506137f881612afc565b92915050565b60006020828403121561381457613813612ac6565b5b6000613822848285016137e9565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000613861601083612b96565b915061386c8261382b565b602082019050919050565b6000602082019050818103600083015261389081613854565b9050919050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b60006138cd601483612b96565b91506138d882613897565b602082019050919050565b600060208201905081810360008301526138fc816138c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061393d82612c46565b915061394883612c46565b92508282101561395b5761395a613903565b5b828203905092915050565b600060808201905061397b60008301876132e6565b6139886020830186613302565b61399560408301856132e6565b6139a260608301846132e6565b95945050505050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006139e1601183612b96565b91506139ec826139ab565b602082019050919050565b60006020820190508181036000830152613a10816139d4565b9050919050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b6000613a4d601883612b96565b9150613a5882613a17565b602082019050919050565b60006020820190508181036000830152613a7c81613a40565b9050919050565b600081905092915050565b6000613a9982612b8b565b613aa38185613a83565b9350613ab3818560208601612ba7565b80840191505092915050565b6000613acb8284613a8e565b915081905092915050565b600081519050919050565b6000613aec82613ad6565b613af68185613768565b9350613b06818560208601612ba7565b613b0f81612bda565b840191505092915050565b6000608082019050613b2f6000830187612cdb565b613b3c6020830186612cdb565b613b496040830185612d71565b8181036060830152613b5b8184613ae1565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ba082612c46565b9150613bab83612c46565b925082613bbb57613bba613b66565b5b828206905092915050565b7f3c696d6167652077696474683d223530302220687265663d2200000000000000815250565b7f2f62672e706e6700000000000000000000000000000000000000000000000000815250565b7f222f3e0000000000000000000000000000000000000000000000000000000000815250565b6000613c448286613a8e565b9150613c4f82613bc6565b601982019150613c5f8285613a8e565b9150613c6b8284613a8e565b9150613c7682613bec565b600782019150613c8582613c12565b600382019150819050949350505050565b7f2f66672e706e6700000000000000000000000000000000000000000000000000815250565b6000613cc88286613a8e565b9150613cd382613bc6565b601982019150613ce38285613a8e565b9150613cef8284613a8e565b9150613cfa82613c96565b600782019150613d0982613c12565b600382019150819050949350505050565b7f2f00000000000000000000000000000000000000000000000000000000000000815250565b60008190508160005260206000209050919050565b60008154613d62816134cb565b613d6c8186613a83565b94506001821660008114613d875760018114613d9857613dcb565b60ff19831686528186019350613dcb565b613da185613d40565b60005b83811015613dc357815481890152600182019150602081019050613da4565b838801955050505b50505092915050565b7f2f6e616d652f0000000000000000000000000000000000000000000000000000815250565b7f2e706e6700000000000000000000000000000000000000000000000000000000815250565b6000613e2c8287613a8e565b9150613e388286613a8e565b9150613e4382613d1a565b600182019150613e538285613d55565b9150613e5e82613dd4565b600682019150613e6e8284613a8e565b9150613e7982613dfa565b60048201915081905095945050505050565b6000613e9682613bc6565b601982019150613ea68284613a8e565b9150613eb182613c12565b60038201915081905092915050565b6000613ecc8285613a8e565b9150613ed88284613a8e565b91508190509392505050565b6000613eef82612c46565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f2257613f21613903565b5b600182019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b6000613f5f8284613a8e565b9150613f6a82613f2d565b60068201915081905092915050565b7f7b226e616d65223a202242616720307800000000000000000000000000000000600082015250565b6000613faf601083613a83565b9150613fba82613f79565b601082019050919050565b7f222c20226465736372697074696f6e223a20224c6f6f742069732072616e646f60008201527f6d697a656420616476656e747572657220676561722067656e6572617465642060208201527f616e642073746f726564206f6e20636861696e2e2053746174732c20696d616760408201527f65732c20616e64206f746865722066756e6374696f6e616c697479206172652060608201527f696e74656e74696f6e616c6c79206f6d697474656420666f72206f746865727360808201527f20746f20696e746572707265742e204665656c206672656520746f207573652060a08201527f4c6f6f7420696e20616e792077617920796f752077616e742e222c2022696d6160c08201527f6765223a2022646174613a696d6167652f7376672b786d6c3b6261736536342c60e082015250565b600061410661010083613a83565b915061411182613fc5565b61010082019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000614153600283613a83565b915061415e8261411d565b600282019050919050565b600061417482613fa2565b91506141808285613a8e565b915061418b826140f8565b91506141978284613a8e565b91506141a282614146565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006141e4601d83613a83565b91506141ef826141ae565b601d82019050919050565b6000614205826141d7565b91506142118284613a8e565b915081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000614252601c83613a83565b915061425d8261421c565b601c82019050919050565b6000819050919050565b61428361427e82613143565b614268565b82525050565b600061429482614245565b91506142a08284614272565b60208201915081905092915050565b60006142ba82612c46565b91506142c583612c46565b9250826142d5576142d4613b66565b5b828204905092915050565b60006142eb82612c46565b91506142f683612c46565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561432b5761432a613903565b5b828201905092915050565b600061434182612c46565b915061434c83612c46565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561438557614384613903565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b60018511156143e7578086048111156143c3576143c2613903565b5b60018516156143d25780820291505b80810290506143e085614390565b94506143a7565b94509492505050565b60008261440057600190506144bc565b8161440e57600090506144bc565b8160018114614424576002811461442e5761445d565b60019150506144bc565b60ff8411156144405761443f613903565b5b8360020a91508482111561445757614456613903565b5b506144bc565b5060208310610133831016604e8410600b84101617156144925782820a90508381111561448d5761448c613903565b5b6144bc565b61449f848484600161439d565b925090508184048111156144b6576144b5613903565b5b81810290505b9392505050565b60006144ce82612c46565b91506144d983612c46565b92506145067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846143f0565b905092915050565b6000614519826132f5565b9150614524836132f5565b92508261453457614533613b66565b5b828204905092915050565b600061454a826132f5565b9150614555836132f5565b92508160ff048311821515161561456f5761456e613903565b5b828202905092915050565b6000614585826132f5565b9150614590836132f5565b9250828210156145a3576145a2613903565b5b828203905092915050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b60006145e4600e83612b96565b91506145ef826145ae565b602082019050919050565b60006020820190508181036000830152614613816145d7565b9050919050565b6000614625826132f5565b9150614630836132f5565b92508260ff0382111561464657614645613903565b5b82820190509291505056fe516d62634b557537314a68363474754a34316657614c6a345852536b7033756d5966615252706e626a4d786548334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c737667207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d2230203020353030203530302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223ea2646970667358221220136abf17190deaaf186e30a7ea116a3618da1135855cb745586adecfa82098f664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 231,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 233,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 244,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 248,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 252,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 258,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1261,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "claimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 741,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "renderOrder",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)8_storage"
      },
      {
        "astId": 747,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "syntheticLoot",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(SyntheticLoot)2696"
      },
      {
        "astId": 750,
        "contract": "contracts/SyntheticLootCharacter.sol:SyntheticLootCharacter",
        "label": "gateways",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)8_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SyntheticLoot)2696": {
        "encoding": "inplace",
        "label": "contract SyntheticLoot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}